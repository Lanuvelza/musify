{"ast":null,"code":"/**\n * Expose `isUrl`.\n */\nmodule.exports = isUrl;\n/**\n * RegExps.\n * A URL must match #1 and then at least one of #2/#3.\n * Use two levels of REs to avoid REDOS.\n */\n\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\nvar localhostDomainRE = /^localhost[\\:?\\d]*(?:[^\\:?\\d]\\S*)?$/;\nvar nonLocalhostDomainRE = /^[^\\s\\.]+\\.\\S{2,}$/;\n/**\n * Loosely validate a URL `string`.\n *\n * @param {String} string\n * @return {Boolean}\n */\n\nfunction isUrl(string) {\n  if (typeof string !== 'string') {\n    return false;\n  }\n\n  var match = string.match(protocolAndDomainRE);\n\n  if (!match) {\n    return false;\n  }\n\n  var everythingAfterProtocol = match[1];\n\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n\n  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/node_modules/is-url/index.js"],"names":["module","exports","isUrl","protocolAndDomainRE","localhostDomainRE","nonLocalhostDomainRE","string","match","everythingAfterProtocol","test"],"mappings":"AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,mBAAmB,GAAG,sBAA1B;AAEA,IAAIC,iBAAiB,GAAG,qCAAxB;AACA,IAAIC,oBAAoB,GAAG,oBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASH,KAAT,CAAeI,MAAf,EAAsB;AACpB,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAO,KAAP;AACD;;AAED,MAAIC,KAAK,GAAGD,MAAM,CAACC,KAAP,CAAaJ,mBAAb,CAAZ;;AACA,MAAI,CAACI,KAAL,EAAY;AACV,WAAO,KAAP;AACD;;AAED,MAAIC,uBAAuB,GAAGD,KAAK,CAAC,CAAD,CAAnC;;AACA,MAAI,CAACC,uBAAL,EAA8B;AAC5B,WAAO,KAAP;AACD;;AAED,MAAIJ,iBAAiB,CAACK,IAAlB,CAAuBD,uBAAvB,KACAH,oBAAoB,CAACI,IAArB,CAA0BD,uBAA1B,CADJ,EACwD;AACtD,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["\n/**\n * Expose `isUrl`.\n */\n\nmodule.exports = isUrl;\n\n/**\n * RegExps.\n * A URL must match #1 and then at least one of #2/#3.\n * Use two levels of REs to avoid REDOS.\n */\n\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\n\nvar localhostDomainRE = /^localhost[\\:?\\d]*(?:[^\\:?\\d]\\S*)?$/\nvar nonLocalhostDomainRE = /^[^\\s\\.]+\\.\\S{2,}$/;\n\n/**\n * Loosely validate a URL `string`.\n *\n * @param {String} string\n * @return {Boolean}\n */\n\nfunction isUrl(string){\n  if (typeof string !== 'string') {\n    return false;\n  }\n\n  var match = string.match(protocolAndDomainRE);\n  if (!match) {\n    return false;\n  }\n\n  var everythingAfterProtocol = match[1];\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n\n  if (localhostDomainRE.test(everythingAfterProtocol) ||\n      nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n    return true;\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}