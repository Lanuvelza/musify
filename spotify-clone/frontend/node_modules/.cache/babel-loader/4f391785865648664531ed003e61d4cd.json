{"ast":null,"code":"var _jsxFileName = \"/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/SongRow.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport \"./styles/SongRow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SongRow({\n  track\n}) {\n  _s();\n\n  var _track$album$images$, _album$images$;\n\n  const [{\n    album,\n    current_track\n  }, dispatch] = useDataLayerValue();\n\n  const playTrack = () => {\n    console.log(track);\n    dispatch({\n      type: \"SET_CURRENT_TRACK\",\n      current_track: track\n    });\n    dispatch({\n      type: \"SET_URI\",\n      uri: track.uri\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: current_track.id === track.id ? \"songRow__selected\" : \"songRow\",\n    onClick: playTrack,\n    children: [track.album ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: (_track$album$images$ = track.album.images[0]) === null || _track$album$images$ === void 0 ? void 0 : _track$album$images$.url,\n      alt: \"\",\n      className: \"songRow__album\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n      src: album && ((_album$images$ = album.images[0]) === null || _album$images$ === void 0 ? void 0 : _album$images$.url),\n      alt: \"\",\n      className: \"songRow__album\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"songRow__info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: track.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [track.artists.map(artist => artist.name).join(\", \"), \" -\", \" \", track.album ? track.album.name : album && album.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SongRow, \"+N7p8BDYr/UZF0lFkR6PBha07uQ=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = SongRow;\nexport default SongRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongRow\");","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/SongRow.js"],"names":["React","useDataLayerValue","SongRow","track","album","current_track","dispatch","playTrack","console","log","type","uri","id","images","url","name","artists","map","artist","join"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAO,sBAAP;;;AAEA,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA4B;AAAA;;AAAA;;AAC1B,QAAM,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAyBC,QAAzB,IAAqCL,iBAAiB,EAA5D;;AAEA,QAAMM,SAAS,GAAG,MAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACAG,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,mBADC;AAEPL,MAAAA,aAAa,EAAEF;AAFR,KAAD,CAAR;AAIAG,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,SADC;AAEPC,MAAAA,GAAG,EAAER,KAAK,CAACQ;AAFJ,KAAD,CAAR;AAID,GAVD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAEN,aAAa,CAACO,EAAd,KAAqBT,KAAK,CAACS,EAA3B,GAAgC,mBAAhC,GAAsD,SAAtE;AAAiF,IAAA,OAAO,EAAEL,SAA1F;AAAA,eACGJ,KAAK,CAACC,KAAN,gBACC;AAAK,MAAA,GAAG,0BAAED,KAAK,CAACC,KAAN,CAAYS,MAAZ,CAAmB,CAAnB,CAAF,yDAAE,qBAAuBC,GAAjC;AAAsC,MAAA,GAAG,EAAC,EAA1C;AAA6C,MAAA,SAAS,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,YADD,gBAEC;AAAK,MAAA,GAAG,EAAEV,KAAK,uBAAIA,KAAK,CAACS,MAAN,CAAa,CAAb,CAAJ,mDAAI,eAAiBC,GAArB,CAAf;AAAyC,MAAA,GAAG,EAAC,EAA7C;AAAgD,MAAA,SAAS,EAAC;AAA1D;AAAA;AAAA;AAAA;AAAA,YAHJ,eAKE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAA,kBAAKX,KAAK,CAACY;AAAX;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBACGZ,KAAK,CAACa,OAAN,CAAcC,GAAd,CAAmBC,MAAD,IAAYA,MAAM,CAACH,IAArC,EAA2CI,IAA3C,CAAgD,IAAhD,CADH,QAC4D,GAD5D,EAEGhB,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,CAAYW,IAA1B,GAAiCX,KAAK,IAAIA,KAAK,CAACW,IAFnD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA9BQb,O;UACoCD,iB;;;KADpCC,O;AAgCT,eAAeA,OAAf","sourcesContent":["import React from \"react\"; \nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport \"./styles/SongRow.css\"\n\nfunction SongRow({ track }) {\n  const [{album, current_track}, dispatch] = useDataLayerValue();\n\n  const playTrack = () => {\n    console.log(track);\n    dispatch({\n      type: \"SET_CURRENT_TRACK\", \n      current_track: track\n    })\n    dispatch({\n      type: \"SET_URI\",\n      uri: track.uri\n    })\n  }\n\n  return (\n    <div className={current_track.id === track.id ? \"songRow__selected\" : \"songRow\"} onClick={playTrack}>\n      {track.album ? \n        <img src={track.album.images[0]?.url} alt=\"\" className=\"songRow__album\" /> :\n        <img src={album && album.images[0]?.url} alt=\"\" className=\"songRow__album\" /> }\n      \n      <div className=\"songRow__info\">\n        <h1>{track.name}</h1>\n        <p>\n          {track.artists.map((artist) => artist.name).join(\", \")} -{\" \"}\n          {track.album ? track.album.name : album && album.name}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default SongRow;\n"]},"metadata":{},"sourceType":"module"}