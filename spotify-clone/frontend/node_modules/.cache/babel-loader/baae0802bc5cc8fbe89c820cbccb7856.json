{"ast":null,"code":"var _jsxFileName = \"/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Artist.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar, Box, makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport \"./styles/Artist.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  section: props => ({\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: '40px',\n    // background: `linear-gradiant(rgb(91, 87, 115), rgba(0,0,0,1)) url(${props.backgroundImage})`,\n    backgroundImage: `url(${props.backgroundImage})`,\n    backgroundPosition: '0px -425px',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    borderRadius: '90px',\n    height: '350px',\n    width: '1550px',\n    paddingTop: '15px',\n    paddingBottom: '15px',\n    boxShadow: '5px 10px 18px black'\n  }),\n  avatar: {\n    height: '300px',\n    width: '300px',\n    borderStyle: 'solid',\n    borderColor: 'white',\n    borderWidth: '3px',\n    boxShadow: '5px 8px 15px black'\n  }\n});\n\nfunction Artist({\n  artist,\n  albums,\n  spotify\n}) {\n  _s();\n\n  const [{}, dispatch] = useDataLayerValue();\n  const props = {\n    backgroundImage: albums ? albums[0].images[0].url : artist.images[0].url,\n    backgroundColor: 'pink'\n  };\n  const classes = useStyles(props);\n\n  const handleClick = () => {\n    spotify.getArtistTopTracks(artist.id, \"US\").then(results => {\n      console.log(\"artist tracks\", results);\n      dispatch({\n        type: \"SET_TRACKS\",\n        tracks: results.tracks\n      });\n      dispatch({\n        type: \"SET_ALBUM\",\n        album: null\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.section,\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: artist.images[0].url,\n        alt: artist.name,\n        className: classes.avatar,\n        onClick: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"artist__Info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: artist ? artist.name : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"artist__followers\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Followers: \", artist ? artist.followers.total : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Artist, \"vbvz/44YFvZar5/FHjo/yOchGHA=\", false, function () {\n  return [useDataLayerValue, useStyles];\n});\n\n_c = Artist;\nexport default Artist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Artist\");","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Artist.js"],"names":["Avatar","Box","makeStyles","React","useDataLayerValue","useStyles","section","props","display","justifyContent","alignItems","marginBottom","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","borderRadius","height","width","paddingTop","paddingBottom","boxShadow","avatar","borderStyle","borderColor","borderWidth","Artist","artist","albums","spotify","dispatch","images","url","backgroundColor","classes","handleClick","getArtistTopTracks","id","then","results","console","log","type","tracks","album","name","followers","total"],"mappings":"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","sourcesContent":["import { Avatar, Box, makeStyles } from \"@material-ui/core\";\nimport React from \"react\"; \nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport \"./styles/Artist.css\";\n\nconst useStyles = makeStyles({\n  section: props => ({\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: '40px',\n    // background: `linear-gradiant(rgb(91, 87, 115), rgba(0,0,0,1)) url(${props.backgroundImage})`,\n    backgroundImage: `url(${props.backgroundImage})`,\n    backgroundPosition: '0px -425px',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    borderRadius: '90px',\n    height: '350px',\n    width: '1550px',\n    paddingTop: '15px',\n    paddingBottom: '15px',\n    boxShadow: '5px 10px 18px black',\n  }),\n  avatar: {\n    height: '300px',\n    width: '300px',\n    borderStyle: 'solid',\n    borderColor: 'white',\n    borderWidth: '3px',\n    boxShadow: '5px 8px 15px black'\n  },\n})\n\n\nfunction Artist({artist, albums, spotify}) {\n  const [{}, dispatch] = useDataLayerValue();\n  const props = { backgroundImage: albums ? albums[0].images[0].url : artist.images[0].url, backgroundColor: 'pink' }\n  const classes = useStyles(props);\n\n  const handleClick = () => {\n    spotify.getArtistTopTracks(artist.id, \"US\")\n      .then((results) => {\n        console.log(\"artist tracks\", results);\n        dispatch({\n          type: \"SET_TRACKS\",\n          tracks: results.tracks\n        });\n\n        dispatch({\n          type: \"SET_ALBUM\",\n          album: null\n        })\n    });\n  }\n\n\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n      <div className={classes.section}>\n        <Avatar src={artist.images[0].url} alt={artist.name} className={classes.avatar} onClick={handleClick}/>\n        <div className=\"artist__Info\">\n          <h2>{artist ? artist.name : null}</h2>\n          <hr />\n          <div className=\"artist__followers\"> \n            <h2>Followers: {artist ? artist.followers.total : null}</h2>\n          </div>\n        </div>\n      </div>\n    </Box>\n  )\n}\n\nexport default Artist; "]},"metadata":{},"sourceType":"module"}