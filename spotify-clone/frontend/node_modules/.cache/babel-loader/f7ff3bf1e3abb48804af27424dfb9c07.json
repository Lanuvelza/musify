{"ast":null,"code":"var _jsxFileName = \"/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Search } from \"@material-ui/icons\";\nimport \"./styles/Header.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotify = new SpotifyWebApi();\n\nfunction Header() {\n  _s();\n\n  var _user$images$;\n\n  const [{\n    user,\n    playlists\n  }, dispatch] = useDataLayerValue();\n  const [search, setSearch] = useState(\"\");\n\n  const findTrack = event => {\n    event.preventDefault();\n    spotify.searchTracks(search).then(search_results => {\n      console.log(search_results);\n      setSearch(\"\");\n      dispatch({\n        action: \"SET_RESULTS\",\n        search_results\n      });\n    });\n    spotify.searchArtists(search).then(artists => {\n      console.log(artists);\n      setSearch(\"\");\n    });\n    spotify.searchPlaylists(search).then(playlists => {\n      console.log(playlists);\n      setSearch(\"\");\n      dispatch({\n        action: \"SET_PLAYLISTS\",\n        playlists\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header__left\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: findTrack,\n        children: [/*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Search for Artists, Songs, or Albums\",\n          type: \"text\",\n          onChange: e => {\n            setSearch(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header__right\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: user === null || user === void 0 ? void 0 : (_user$images$ = user.images[0]) === null || _user$images$ === void 0 ? void 0 : _user$images$.url,\n        alt: user === null || user === void 0 ? void 0 : user.display_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: user === null || user === void 0 ? void 0 : user.display_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Header, \"cwsO3Glya4Kcq8WXP1RTi6+oBHU=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Header.js"],"names":["React","useState","Search","Avatar","useDataLayerValue","SpotifyWebApi","spotify","Header","user","playlists","dispatch","search","setSearch","findTrack","event","preventDefault","searchTracks","then","search_results","console","log","action","searchArtists","artists","searchPlaylists","e","target","value","images","url","display_name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAO,qBAAP;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;;AAEA,MAAMC,OAAO,GAAG,IAAID,aAAJ,EAAhB;;AAEA,SAASE,MAAT,GAAkB;AAAA;;AAAA;;AAChB,QAAM,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,EAAsBC,QAAtB,IAAkCN,iBAAiB,EAAzD;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMY,SAAS,GAAIC,KAAD,IAAW;AAC3BA,IAAAA,KAAK,CAACC,cAAN;AACAT,IAAAA,OAAO,CAACU,YAAR,CAAqBL,MAArB,EACCM,IADD,CACOC,cAAD,IAAoB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;AACAN,MAAAA,SAAS,CAAC,EAAD,CAAT;AACAF,MAAAA,QAAQ,CAAC;AACPW,QAAAA,MAAM,EAAE,aADD;AAEPH,QAAAA;AAFO,OAAD,CAAR;AAID,KARD;AASAZ,IAAAA,OAAO,CAACgB,aAAR,CAAsBX,MAAtB,EACCM,IADD,CACOM,OAAD,IAAa;AACjBJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACAX,MAAAA,SAAS,CAAC,EAAD,CAAT;AACD,KAJD;AAKAN,IAAAA,OAAO,CAACkB,eAAR,CAAwBb,MAAxB,EACCM,IADD,CACOR,SAAD,IAAe;AACnBU,MAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACAG,MAAAA,SAAS,CAAC,EAAD,CAAT;AACAF,MAAAA,QAAQ,CAAC;AACPW,QAAAA,MAAM,EAAE,eADD;AAEPZ,QAAAA;AAFO,OAAD,CAAR;AAID,KARD;AASD,GAzBD;;AA2BA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAM,QAAA,QAAQ,EAAEI,SAAhB;AAAA,gCACC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAO,UAAA,WAAW,EAAC,sCAAnB;AAA0D,UAAA,IAAI,EAAC,MAA/D;AAAsE,UAAA,QAAQ,EAAGY,CAAD,IAAO;AAACb,YAAAA,SAAS,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AAA0B;AAAlH;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,GAAG,EAAEnB,IAAF,aAAEA,IAAF,wCAAEA,IAAI,CAAEoB,MAAN,CAAa,CAAb,CAAF,kDAAE,cAAiBC,GAA9B;AAAmC,QAAA,GAAG,EAAErB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEsB;AAA9C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKtB,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEsB;AAAX;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA7CQvB,M;UACiCH,iB;;;KADjCG,M;AA8CT,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\"; \nimport { Search } from \"@material-ui/icons\"; \nimport \"./styles/Header.css\";\nimport { Avatar } from \"@material-ui/core\"; \nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nconst spotify = new SpotifyWebApi\n\nfunction Header() {\n  const [{ user, playlists }, dispatch] = useDataLayerValue(); \n  const [search, setSearch] = useState(\"\");\n\n  const findTrack = (event) => {\n    event.preventDefault();\n    spotify.searchTracks(search)\n    .then((search_results) => {\n      console.log(search_results);\n      setSearch(\"\");\n      dispatch({\n        action: \"SET_RESULTS\",\n        search_results\n      });\n    });\n    spotify.searchArtists(search)\n    .then((artists) => {\n      console.log(artists);\n      setSearch(\"\");\n    })\n    spotify.searchPlaylists(search)\n    .then((playlists) => {\n      console.log(playlists);\n      setSearch(\"\");\n      dispatch({\n        action: \"SET_PLAYLISTS\",\n        playlists\n      })\n    })\n  }\n\n  return (\n    <div className=\"header\">\n      <div className=\"header__left\">\n        <form onSubmit={findTrack}>\n         <Search />\n         <input placeholder=\"Search for Artists, Songs, or Albums\" type=\"text\" onChange={(e) => {setSearch(e.target.value)}}/>\n        </form>\n      </div>\n      <div className=\"header__right\">\n        <Avatar src={user?.images[0]?.url} alt={user?.display_name} />\n        <h4>{user?.display_name}</h4>\n      </div>\n    </div>\n  );\n}\nexport default Header;"]},"metadata":{},"sourceType":"module"}