{"ast":null,"code":"const axios = require('axios');\n\nconst api_key = process.env.REACT_APP_YOUTUBE_API_KEY;\nconst baseURL = 'https://www.googleapis.com/youtube/v3';\nexport const sortChannelsBySubscriberCount = channels => {\n  const sortedChannels = channels.sort((a, b) => {\n    if (Number(a.statistics.subscriberCount) < Number(b.statistics.subscriberCount)) {\n      return 1;\n    }\n\n    if (Number(a.statistics.subscriberCount) > Number(b.statistics.subscriberCount)) {\n      return -1;\n    }\n\n    return 0;\n  });\n  return sortedChannels;\n};\nexport const filterChannelsByVisibleSubscriberCount = channels => {\n  return channels.filter(channel => channel.statistics.hiddenSubscriberCount === false);\n};\nexport const searchChannels = name => {\n  return axios.get(`${baseURL}/search?key=${api_key}&q=${name}&type=channel&part=snippet&maxResults=25`).then(response => {\n    console.log(response);\n    const ids = response.data.items.map(item => {\n      return item.id.channelId;\n    }); // console.log(ids);\n\n    const channels = ids.map(id => {\n      return axios.get(`${baseURL}/channels?key=${api_key}&part=snippet,contentDetails,statistics&id=${id}`).then(result => {\n        // console.log(result);\n        return result.data;\n      });\n    });\n    const channelsData = Promise.all(channels).then(data => {\n      console.log(data);\n      const channelDataDetails = data.map(detail => {\n        // console.log(detail);\n        // console.log(detail.items);\n        // console.log(detail.items[0]);\n        return detail.items[0];\n      });\n      return channelDataDetails; // return channelDataDetails;\n    }); // console.log(channelsData);\n\n    return channelsData;\n  });\n};","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/youtube/youtube.js"],"names":["axios","require","api_key","process","env","REACT_APP_YOUTUBE_API_KEY","baseURL","sortChannelsBySubscriberCount","channels","sortedChannels","sort","a","b","Number","statistics","subscriberCount","filterChannelsByVisibleSubscriberCount","filter","channel","hiddenSubscriberCount","searchChannels","name","get","then","response","console","log","ids","data","items","map","item","id","channelId","result","channelsData","Promise","all","channelDataDetails","detail"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAA5B;AACA,MAAMC,OAAO,GAAG,uCAAhB;AAGA,OAAO,MAAMC,6BAA6B,GAAIC,QAAD,IAAc;AACzD,QAAMC,cAAc,GAAID,QAAQ,CAACE,IAAT,CAAc,CAACC,CAAD,EAAGC,CAAH,KAAS;AAC7C,QAAIC,MAAM,CAACF,CAAC,CAACG,UAAF,CAAaC,eAAd,CAAN,GAAuCF,MAAM,CAACD,CAAC,CAACE,UAAF,CAAaC,eAAd,CAAjD,EAAiF;AAC/E,aAAO,CAAP;AACD;;AACD,QAAIF,MAAM,CAACF,CAAC,CAACG,UAAF,CAAaC,eAAd,CAAN,GAAuCF,MAAM,CAACD,CAAC,CAACE,UAAF,CAAaC,eAAd,CAAjD,EAAiF;AAC/E,aAAO,CAAC,CAAR;AACD;;AACD,WAAO,CAAP;AACD,GARuB,CAAxB;AASA,SAAON,cAAP;AACD,CAXM;AAaP,OAAO,MAAMO,sCAAsC,GAAIR,QAAD,IAAc;AAClE,SAAOA,QAAQ,CAACS,MAAT,CAAiBC,OAAD,IAAaA,OAAO,CAACJ,UAAR,CAAmBK,qBAAnB,KAA6C,KAA1E,CAAP;AACD,CAFM;AAKP,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAU;AACtC,SAAOrB,KAAK,CAACsB,GAAN,CAAW,GAAEhB,OAAQ,eAAcJ,OAAQ,MAAKmB,IAAK,0CAArD,EACNE,IADM,CACDC,QAAQ,IAAI;AAEhBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,UAAMG,GAAG,GAAGH,QAAQ,CAACI,IAAT,CAAcC,KAAd,CAAoBC,GAApB,CAAyBC,IAAD,IAAU;AAC5C,aAAOA,IAAI,CAACC,EAAL,CAAQC,SAAf;AACD,KAFW,CAAZ,CAJgB,CAQhB;;AAEA,UAAMzB,QAAQ,GAAGmB,GAAG,CAACG,GAAJ,CAASE,EAAD,IAAQ;AAC/B,aAAOhC,KAAK,CAACsB,GAAN,CAAW,GAAEhB,OAAQ,iBAAgBJ,OAAQ,8CAA6C8B,EAAG,EAA7F,EACNT,IADM,CACDW,MAAM,IAAI;AACd;AACA,eAAOA,MAAM,CAACN,IAAd;AACD,OAJM,CAAP;AAKD,KANgB,CAAjB;AAQA,UAAMO,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAY7B,QAAZ,EAAsBe,IAAtB,CAA2BK,IAAI,IAAI;AACtDH,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACA,YAAMU,kBAAkB,GAAGV,IAAI,CAACE,GAAL,CAAUS,MAAD,IAAY;AAC9C;AACA;AACA;AACA,eAAOA,MAAM,CAACV,KAAP,CAAa,CAAb,CAAP;AACD,OAL0B,CAA3B;AAOA,aAAOS,kBAAP,CATsD,CAWtD;AACD,KAZoB,CAArB,CAlBgB,CAgChB;;AAEA,WAAOH,YAAP;AACD,GApCM,CAAP;AAqCD,CAtCM","sourcesContent":["const axios = require('axios');\nconst api_key = process.env.REACT_APP_YOUTUBE_API_KEY;\nconst baseURL = 'https://www.googleapis.com/youtube/v3';\n\n\nexport const sortChannelsBySubscriberCount = (channels) => {\n  const sortedChannels =  channels.sort((a,b) => {\n    if (Number(a.statistics.subscriberCount) < Number(b.statistics.subscriberCount)) {\n      return 1;\n    }\n    if (Number(a.statistics.subscriberCount) > Number(b.statistics.subscriberCount)) {\n      return -1;\n    }\n    return 0; \n  });\n  return sortedChannels;\n}\n\nexport const filterChannelsByVisibleSubscriberCount = (channels) => {\n  return channels.filter((channel) => channel.statistics.hiddenSubscriberCount === false);\n}\n\n\nexport const searchChannels = (name) => {\n  return axios.get(`${baseURL}/search?key=${api_key}&q=${name}&type=channel&part=snippet&maxResults=25`)\n  .then(response => {\n\n    console.log(response)\n    \n    const ids = response.data.items.map((item) => {\n      return item.id.channelId;\n    }) \n\n    // console.log(ids);\n\n    const channels = ids.map((id) => {\n      return axios.get(`${baseURL}/channels?key=${api_key}&part=snippet,contentDetails,statistics&id=${id}`)\n      .then(result => {\n        // console.log(result);\n        return result.data;\n      });\n    })\n\n    const channelsData = Promise.all(channels).then(data => {\n      console.log(data);\n      const channelDataDetails = data.map((detail) => {\n        // console.log(detail);\n        // console.log(detail.items);\n        // console.log(detail.items[0]);\n        return detail.items[0];\n      })\n\n      return channelDataDetails;\n\n      // return channelDataDetails;\n    });\n\n    // console.log(channelsData);\n\n    return channelsData;\n  });\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}