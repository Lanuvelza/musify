{"ast":null,"code":"var _jsxFileName = \"/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Body.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./styles/Body.css\";\nimport { PlayCircleFilled, Favorite, MoreHoriz } from \"@material-ui/icons\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport Header from \"./Header\";\nimport SongRow from \"./SongRow\";\nimport Album from \"./Album\";\nimport Artist from \"./Artist\";\nimport SearchResults from \"./SearchResults\";\nimport AlbumsLibrary from \"./AlbumsLibrary\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Body({\n  spotify\n}) {\n  _s();\n\n  var _artists$items, _artists$items2;\n\n  const [{\n    discover_weekly,\n    playlists,\n    current_playlist,\n    albums,\n    album,\n    tracks,\n    artists,\n    artist,\n    searching\n  }, dispatch] = useDataLayerValue();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [searching && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"searchResults__body\",\n      children: (artists === null || artists === void 0 ? void 0 : (_artists$items = artists.items) === null || _artists$items === void 0 ? void 0 : _artists$items.length) ? artists === null || artists === void 0 ? void 0 : (_artists$items2 = artists.items) === null || _artists$items2 === void 0 ? void 0 : _artists$items2.map(item => /*#__PURE__*/_jsxDEV(SearchResults, {\n        artist: item,\n        spotify: spotify\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No such artist found. Try another artist...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body__info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body__artistInfo\",\n        children: [artist && /*#__PURE__*/_jsxDEV(Artist, {\n          artist: artist,\n          albums: albums,\n          spotify: spotify\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 22\n        }, this), album ? /*#__PURE__*/_jsxDEV(Album, {\n          album: album,\n          spotify: spotify\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 20\n        }, this) : albums && /*#__PURE__*/_jsxDEV(Album, {\n          album: albums[0],\n          spotify: spotify\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 74\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body__infoText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body__songs\",\n      children: tracks && tracks.map(track => /*#__PURE__*/_jsxDEV(SongRow, {\n        track: track\n      }, track.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), albums && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body__albums\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Albums & Singles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body__albumsDisplay\",\n        children: albums === null || albums === void 0 ? void 0 : albums.map(album => /*#__PURE__*/_jsxDEV(AlbumsLibrary, {\n          album: album,\n          spotify: spotify\n        }, album.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 12\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Body, \"pjRN0pB6hFiylDf/pggkxjkfD48=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Body;\nexport default Body;\n\nvar _c;\n\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Body.js"],"names":["React","PlayCircleFilled","Favorite","MoreHoriz","useDataLayerValue","Header","SongRow","Album","Artist","SearchResults","AlbumsLibrary","Body","spotify","discover_weekly","playlists","current_playlist","albums","album","tracks","artists","artist","searching","dispatch","items","length","map","item","id","track"],"mappings":"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","sourcesContent":["import React from \"react\"; \nimport \"./styles/Body.css\";\nimport { PlayCircleFilled, Favorite, MoreHoriz } from \"@material-ui/icons\"; \nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport Header from \"./Header\";\nimport SongRow from \"./SongRow\";\nimport Album from \"./Album\";\nimport Artist from \"./Artist\";\nimport SearchResults from \"./SearchResults\";\nimport AlbumsLibrary from \"./AlbumsLibrary\";\n\nfunction Body({spotify}) {\n  const [{ \n    discover_weekly, \n    playlists, \n    current_playlist, \n    albums, \n    album, \n    tracks, \n    artists, \n    artist, \n    searching }, dispatch] = useDataLayerValue();\n\n  return (\n    <div className=\"body\">\n      {/* <Header spotify={spotify} /> */}\n      {searching && \n      <div className=\"searchResults__body\">\n        {artists?.items?.length ? artists?.items?.map((item) => (\n        <SearchResults artist={item} key={item.id} spotify={spotify}/>\n      )): <h2>No such artist found. Try another artist...</h2>}\n      </div>}\n      <div className=\"body__info\">\n        <div className=\"body__artistInfo\">\n          {artist && <Artist artist={artist} albums={albums} spotify={spotify} />}\n          {album ? <Album album={album} spotify={spotify} /> : albums && <Album album={albums[0]} spotify={spotify} />}\n          {/* {albums ? <LatestAlbum spotify={spotify}/>\n          : \n          (current_playlist ? \n          <img src = {playlists.items ? playlists.items[0].images[0].url : null} alt=\"\" /> :\n          <img src = {discover_weekly?.images[0]?.url} alt=\"\" /> )} */}\n        </div>\n        <div className=\"body__infoText\">\n          {/* {albums ? null :\n          \n          (current_playlist ? \n          <>\n            <strong>PLAYLIST</strong>\n            <h2>{current_playlist.name}</h2> \n            <p>{current_playlist.description}</p>\n          </> :\n          <>\n            <strong>PLAYLIST</strong>\n            <h2>Discover Weekly</h2>\n            <p>{discover_weekly?.description}</p>\n          </>\n          )\n          } */}\n        </div>\n      </div>\n      <div className=\"body__songs\">\n        {/* <div className=\"body__icons\">\n          <PlayCircleFilled className=\"body__shuffle\" />\n          <Favorite fontSize=\"large\" />\n          <MoreHoriz />\n        </div> */}\n        {tracks && tracks.map((track) => (\n          <SongRow track={track} key={track.id} />\n        ))}\n        {/* {tracks ? tracks.map((track) => (\n          <SongRow track={track} key={track.id} />\n        )): \n        (current_playlist ? \n          current_playlist.tracks.items.map((item) => (\n            <SongRow track={item.track} key={item.track.id}/>\n          )) : \n          discover_weekly?.tracks.items.map((item) => (\n            <SongRow track={item.track} key={item.track.id} />\n          )))} */}\n      </div>\n      {albums && \n      <div className=\"body__albums\">\n        <h1>Albums & Singles</h1>\n        <div className=\"body__albumsDisplay\">\n           {albums?.map((album) => (\n           <AlbumsLibrary album={album} key={album.id} spotify={spotify} />\n          ))}\n        </div>\n      </div>\n      }\n    </div>\n  );\n}\n\nexport default Body;"]},"metadata":{},"sourceType":"module"}