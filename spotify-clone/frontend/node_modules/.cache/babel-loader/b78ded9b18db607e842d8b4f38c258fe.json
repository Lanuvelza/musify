{"ast":null,"code":"// Native\nconst fs = require('fs');\n\nconst crypto = require('crypto'); // Packages\n\n\nconst request = require('request-promise-native');\n\nconst {\n  Cookie\n} = require('tough-cookie');\n\nconst isUrl = require('is-url');\n\nconst useragentFromSeed = require('useragent-from-seed');\n\nconst baseUrl = 'https://www.instagram.com';\n\nclass Instagram {\n  constructor({\n    username,\n    password,\n    cookieStore\n  }, {\n    language,\n    proxy,\n    requestOptions\n  } = {}) {\n    this.credentials = {\n      username,\n      password\n    };\n    const jar = request.jar(cookieStore);\n    jar.setCookie(request.cookie('ig_cb=1'), baseUrl);\n    const {\n      value: csrftoken\n    } = jar.getCookies(baseUrl).find(({\n      key\n    }) => key === 'csrftoken') || {};\n    const userAgent = useragentFromSeed(username);\n\n    if (requestOptions === undefined) {\n      requestOptions = {};\n    }\n\n    requestOptions.baseUrl = baseUrl;\n    requestOptions.uri = '';\n    requestOptions.headers = {\n      'User-Agent': userAgent,\n      'Accept-Language': language || 'en-US',\n      'X-Instagram-AJAX': 1,\n      'X-CSRFToken': csrftoken,\n      'X-Requested-With': 'XMLHttpRequest',\n      Referer: baseUrl\n    };\n    requestOptions.proxy = proxy;\n    requestOptions.jar = jar;\n    requestOptions.json = true;\n    this.request = request.defaults(requestOptions);\n  }\n\n  async login({\n    username,\n    password\n  } = {}, {\n    _sharedData = true\n  } = {}) {\n    username = username || this.credentials.username;\n    password = password || this.credentials.password; // Get CSRFToken from cookie before login\n\n    let value;\n    await this.request('/', {\n      resolveWithFullResponse: true\n    }).then(res => {\n      const pattern = new RegExp(/(csrf_token\":\")\\w+/);\n      const matches = res.toJSON().body.match(pattern);\n      value = matches[0].substring(13);\n    }); // Provide CSRFToken for login or challenge request\n\n    this.request = this.request.defaults({\n      headers: {\n        'X-CSRFToken': value\n      }\n    }); // Temporary work around for https://github.com/jlobos/instagram-web-api/issues/118\n\n    const createEncPassword = pwd => {\n      return `#PWD_INSTAGRAM_BROWSER:0:${Date.now()}:${pwd}`;\n    }; // Login\n\n\n    const res = await this.request.post('/accounts/login/ajax/', {\n      resolveWithFullResponse: true,\n      form: {\n        username,\n        enc_password: createEncPassword(password)\n      }\n    });\n\n    if (!res.headers['set-cookie']) {\n      throw new Error('No cookie');\n    }\n\n    const cookies = res.headers['set-cookie'].map(Cookie.parse); // Get CSRFToken after successful login\n\n    const {\n      value: csrftoken\n    } = cookies.find(({\n      key\n    }) => key === 'csrftoken').toJSON(); // Provide CSRFToken to request\n\n    this.request = this.request.defaults({\n      headers: {\n        'X-CSRFToken': csrftoken\n      }\n    });\n    this.credentials = {\n      username,\n      password,\n      // Add cookies to credentials\n      cookies: cookies.map(cookie => cookie.toJSON())\n    }; // Provide _sharedData\n\n    if (_sharedData) {\n      this._sharedData = await this._getSharedData();\n    }\n\n    return res.body;\n  }\n\n  async _getSharedData(url = '/') {\n    return this.request(url).then(html => html.split('window._sharedData = ')[1].split(';</script>')[0]).then(_sharedData => JSON.parse(_sharedData));\n  }\n\n  async _getGis(path) {\n    const {\n      rhx_gis\n    } = this._sharedData || (await this._getSharedData(path));\n    return crypto.createHash('md5').update(`${rhx_gis}:${path}`).digest('hex');\n  }\n\n  async logout() {\n    return this.request('/accounts/logout/ajax/');\n  }\n\n  async _getHomeData({\n    queryHash,\n    variables\n  }) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: queryHash,\n        variables: JSON.stringify(variables)\n      }\n    }).then(data => data);\n  }\n\n  async getHome(mediaItemCursor) {\n    return this._getHomeData({\n      queryHash: '01b3ccff4136c4adf5e67e1dd7eab68d',\n      variables: {\n        fetch_media_item_cursor: mediaItemCursor\n      }\n    });\n  }\n\n  async getUserByUsername({\n    username\n  }) {\n    return this.request({\n      uri: `/${username}/?__a=1`,\n      headers: {\n        referer: baseUrl + '/' + username + '/',\n        'x-instagram-gis': await this._getGis(`/${username}/`)\n      }\n    }).then(data => data.graphql.user);\n  }\n\n  async getStoryReelFeed({\n    onlyStories = false\n  } = {}) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: '60b755363b5c230111347a7a4e242001',\n        variables: JSON.stringify({\n          only_stories: onlyStories\n        })\n      }\n    }).then(data => data.data.user.feed_reels_tray.edge_reels_tray_to_reel).then(edge_reels_tray_to_reel => edge_reels_tray_to_reel.edges).then(edges => edges.map(edge => edge.node));\n  }\n\n  async getStoryReels({\n    reelIds = [],\n    tagNames = [],\n    locationIds = [],\n    precomposedOverlay = false\n  } = {}) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: '297c491471fff978fa2ab83c0673a618',\n        variables: JSON.stringify({\n          reel_ids: reelIds,\n          tag_names: tagNames,\n          location_ids: locationIds,\n          precomposed_overlay: precomposedOverlay\n        })\n      }\n    }).then(data => data.data.reels_media);\n  }\n\n  async getUserIdPhotos({\n    id,\n    first = 12,\n    after = ''\n  } = {}) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: '6305d415e36c0a5f0abb6daba312f2dd',\n        variables: JSON.stringify({\n          id,\n          first,\n          after\n        })\n      }\n    }).then(data => data.data);\n  }\n\n  async getPhotosByHashtag({\n    hashtag,\n    first = 12,\n    after = ''\n  } = {}) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: 'ded47faa9a1aaded10161a2ff32abb6b',\n        variables: JSON.stringify({\n          tag_name: hashtag,\n          first,\n          after\n        })\n      }\n    }).then(data => data.data);\n  }\n\n  async getPhotosByUsername({\n    username,\n    first,\n    after\n  }) {\n    const user = await this.getUserByUsername({\n      username\n    });\n    return this.getUserIdPhotos({\n      id: user.id,\n      first,\n      after\n    });\n  }\n\n  async getStoryItemsByUsername({\n    username\n  }) {\n    const user = await this.getUserByUsername({\n      username\n    });\n    return this.getStoryItemsByReel({\n      reelId: user.id\n    });\n  }\n\n  async getStoryItemsByHashtag({\n    hashtag\n  }) {\n    const reels = await this.getStoryReels({\n      tagNames: [hashtag]\n    });\n    if (reels.length === 0) return [];\n    return reels[0].items;\n  }\n\n  async getStoryItemsByLocation({\n    locationId\n  }) {\n    const reels = await this.getStoryReels({\n      locationIds: [locationId]\n    });\n    if (reels.length === 0) return [];\n    return reels[0].items;\n  }\n\n  async getStoryItemsByReel({\n    reelId\n  }) {\n    const reels = await this.getStoryReels({\n      reelIds: [reelId]\n    });\n    if (reels.length === 0) return [];\n    return reels[0].items;\n  }\n\n  async markStoryItemAsSeen({\n    reelMediaId,\n    reelMediaOwnerId,\n    reelId,\n    reelMediaTakenAt,\n    viewSeenAt\n  }) {\n    return this.request.post('/stories/reel/seen', {\n      form: {\n        reelMediaId,\n        reelMediaOwnerId,\n        reelId,\n        reelMediaTakenAt,\n        viewSeenAt\n      }\n    });\n  }\n\n  async _getFollowData({\n    fieldName,\n    queryHash,\n    variables\n  }) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: queryHash,\n        variables: JSON.stringify(variables)\n      }\n    }).then(data => data.data.user[fieldName]).then(({\n      count,\n      page_info,\n      edges\n    }) => ({\n      count,\n      page_info,\n      data: edges.map(edge => edge.node)\n    }));\n  }\n\n  async getFollowers({\n    userId,\n    first = 20,\n    after\n  }) {\n    return this._getFollowData({\n      fieldName: 'edge_followed_by',\n      queryHash: '37479f2b8209594dde7facb0d904896a',\n      variables: {\n        id: userId,\n        first,\n        after\n      }\n    });\n  }\n\n  async getFollowings({\n    userId,\n    first = 20,\n    after\n  }) {\n    return this._getFollowData({\n      fieldName: 'edge_follow',\n      queryHash: '58712303d941c6855d4e888c5f0cd22f',\n      variables: {\n        id: userId,\n        first,\n        after\n      }\n    });\n  }\n\n  async getChainsData({\n    userId\n  }) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: '7c16654f22c819fb63d1183034a5162f',\n        variables: JSON.stringify({\n          user_id: userId,\n          include_chaining: true,\n          include_reel: false,\n          include_suggested_users: false,\n          include_logged_out_extras: false,\n          include_highlight_reels: false\n        })\n      }\n    }).then(data => data.data.user.edge_chaining).then(({\n      edges\n    }) => edges.map(edge => edge.node));\n  }\n\n  async getActivity() {\n    return this.request('/accounts/activity/?__a=1').then(data => data.graphql.user);\n  }\n\n  async getProfile() {\n    return this.request('/accounts/edit/?__a=1').then(data => data.form_data);\n  }\n\n  async updateProfile({\n    name = '',\n    email = '',\n    username,\n    phoneNumber = '',\n    gender,\n    biography = '',\n    website = '',\n    similarAccountSuggestions = true\n  }) {\n    return this.request.post('/accounts/edit/', {\n      form: {\n        first_name: name,\n        email,\n        username: username || this.credentials.username,\n        phone_number: phoneNumber,\n        gender,\n        biography,\n        external_url: website,\n        chaining_enabled: similarAccountSuggestions\n      }\n    });\n  }\n\n  async changeProfilePhoto({\n    photo\n  }) {\n    return this.request.post('/accounts/web_change_profile_picture/', {\n      formData: {\n        profile_pic: isUrl(photo) ? request(photo) : fs.createReadStream(photo)\n      }\n    });\n  }\n\n  async deleteMedia({\n    mediaId\n  }) {\n    return this.request.post(`/create/${mediaId}/delete/`);\n  }\n\n  async _uploadPhoto({\n    photo\n  }) {\n    // Warning! don't change anything bellow.\n    const uploadId = Date.now();\n    let file; // Needed to new method, if image is from url.\n\n    if (isUrl(photo)) {\n      // Enconding: null is required, only this way a Buffer is returned\n      file = await request.get({\n        url: photo,\n        encoding: null\n      });\n    } else {\n      file = await fs.readFileSync(photo);\n    }\n\n    const ruploadParams = {\n      media_type: 1,\n      upload_id: uploadId.toString(),\n      upload_media_height: 1080,\n      upload_media_width: 1080,\n      xsharing_user_ids: JSON.stringify([]),\n      image_compression: JSON.stringify({\n        lib_name: 'moz',\n        lib_version: '3.1.m',\n        quality: '80'\n      })\n    };\n    const nameEntity = `${uploadId}_0_${Math.random(1000000000, 9999999999)}`;\n    const headersPhoto = {\n      'x-entity-type': 'image/jpeg',\n      offset: 0,\n      'x-entity-name': nameEntity,\n      'x-instagram-rupload-params': JSON.stringify(ruploadParams),\n      'x-entity-length': file.byteLength,\n      'Content-Length': file.byteLength,\n      'Content-Type': 'application/octet-stream',\n      'x-ig-app-id': `1217981644879628`,\n      'Accept-Encoding': 'gzip',\n      'X-Pigeon-Rawclienttime': (Date.now() / 1000).toFixed(3),\n      'X-IG-Connection-Speed': `${Math.random(1000, 3700)}kbps`,\n      'X-IG-Bandwidth-Speed-KBPS': '-1.000',\n      'X-IG-Bandwidth-TotalBytes-B': '0',\n      'X-IG-Bandwidth-TotalTime-MS': '0'\n    }; // Json = false, must be important to post work!\n\n    let responseUpload = await this.request({\n      uri: `/rupload_igphoto/${nameEntity}`,\n      headers: headersPhoto,\n      method: 'POST',\n      json: false,\n      body: file\n    });\n\n    try {\n      responseUpload = JSON.parse(responseUpload);\n      if ('upload_id' in responseUpload) return responseUpload;\n      throw new Error('Image upload error');\n    } catch (e) {\n      throw new Error(`Image upload error: ${e}`);\n    }\n  } // Upload to story moved to uploadPhoto\n  // Post: 'feed' or 'story'\n\n\n  async uploadPhoto({\n    photo,\n    caption = '',\n    post = 'feed'\n  }) {\n    const dateObj = new Date();\n    const now = dateObj.toISOString().replace(/T/, ' ').replace(/\\..+/, ' ');\n    const offset = dateObj.getTimezoneOffset();\n    const responseUpload = await this._uploadPhoto({\n      photo\n    });\n    return this.request.post(`/create/${post === 'feed' ? 'configure/' : 'configure_to_story/'}`, {\n      form: {\n        upload_id: responseUpload.upload_id,\n        caption,\n        timezone_offset: offset,\n        date_time_original: now,\n        date_time_digitalized: now,\n        source_type: '4',\n        edits: {\n          crop_original_size: [1080, 1080],\n          crop_center: [0.0, -0.0],\n          crop_zoom: 1.0\n        }\n      }\n    }).then(response => response);\n  }\n\n  async getMediaFeedByLocation({\n    locationId\n  }) {\n    return this.request(`/explore/locations/${locationId}/?__a=1`).then(data => data.graphql.location);\n  }\n\n  async getMediaFeedByHashtag({\n    hashtag\n  }) {\n    return this.request(`/explore/tags/${hashtag}/?__a=1`).then(data => data.graphql.hashtag);\n  }\n\n  async locationSearch({\n    query,\n    latitude,\n    longitude,\n    distance = 500\n  }) {\n    return this.request('/location_search/', {\n      qs: {\n        search_query: query,\n        latitude,\n        longitude,\n        distance\n      }\n    }).then(data => data.venues);\n  }\n\n  async getMediaByShortcode({\n    shortcode\n  }) {\n    return this.request(`/p/${shortcode}/?__a=1`).then(data => data.graphql.shortcode_media);\n  }\n\n  async getMediaComments({\n    shortcode,\n    first = 12,\n    after = ''\n  }) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: 'bc3296d1ce80a24b1b6e40b1e72903f5',\n        variables: JSON.stringify({\n          shortcode,\n          first,\n          after\n        })\n      }\n    }).then(response => response.data.shortcode_media || {}).then(media => media.edge_media_to_parent_comment || {}).then(({\n      count = 0,\n      page_info = {},\n      edges = []\n    }) => ({\n      count,\n      page_info,\n      edges\n    }));\n  }\n\n  async getMediaLikes({\n    shortcode,\n    first = 12,\n    after = ''\n  }) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: 'd5d763b1e2acf209d62d22d184488e57',\n        variables: JSON.stringify({\n          shortcode,\n          first,\n          after\n        })\n      }\n    }).then(response => response.data.shortcode_media || {}).then(media => media.edge_liked_by || {}).then(({\n      count = 0,\n      page_info = {},\n      edges = []\n    }) => ({\n      count,\n      page_info,\n      edges\n    }));\n  }\n\n  async addComment({\n    mediaId,\n    text,\n    replyToCommentId\n  }) {\n    return this.request.post(`/web/comments/${mediaId}/add/`, {\n      form: {\n        comment_text: text,\n        replied_to_comment_id: replyToCommentId\n      }\n    });\n  }\n\n  async deleteComment({\n    mediaId,\n    commentId\n  }) {\n    return this.request.post(`/web/comments/${mediaId}/delete/${commentId}/`);\n  }\n\n  async getChallenge({\n    challengeUrl\n  }) {\n    return this.request(`${challengeUrl}?__a=1`);\n  }\n\n  async _navigateChallenge({\n    challengeUrl,\n    endpoint,\n    form\n  }) {\n    const url = endpoint ? challengeUrl.replace('/challenge/', `/challenge/${endpoint}/`) : challengeUrl;\n    return this.request.post(url, {\n      headers: {\n        Referer: `${baseUrl}${challengeUrl}`\n      },\n      form\n    });\n  }\n\n  async updateChallenge({\n    challengeUrl,\n    choice,\n    securityCode\n  }) {\n    const form = securityCode ? {\n      security_code: securityCode\n    } : {\n      choice\n    };\n    return this._navigateChallenge({\n      challengeUrl,\n      form\n    });\n  }\n\n  async resetChallenge({\n    challengeUrl\n  }) {\n    return this._navigateChallenge({\n      challengeUrl,\n      endpoint: 'reset'\n    });\n  }\n\n  async replayChallenge({\n    challengeUrl\n  }) {\n    return this._navigateChallenge({\n      challengeUrl,\n      endpoint: 'replay'\n    });\n  }\n\n  async approve({\n    userId\n  }) {\n    return this.request.post(`/web/friendships/${userId}/approve/`);\n  }\n\n  async ignore({\n    userId\n  }) {\n    return this.request.post(`/web/friendships/${userId}/ignore/`);\n  }\n\n  async follow({\n    userId\n  }) {\n    return this.request.post(`/web/friendships/${userId}/follow/`);\n  }\n\n  async unfollow({\n    userId\n  }) {\n    return this.request.post(`/web/friendships/${userId}/unfollow/`);\n  }\n\n  async block({\n    userId\n  }) {\n    return this.request.post(`/web/friendships/${userId}/block/`);\n  }\n\n  async unblock({\n    userId\n  }) {\n    return this.request.post(`/web/friendships/${userId}/unblock/`);\n  }\n\n  async like({\n    mediaId\n  }) {\n    return this.request.post(`/web/likes/${mediaId}/like/`);\n  }\n\n  async unlike({\n    mediaId\n  }) {\n    return this.request.post(`/web/likes/${mediaId}/unlike/`);\n  }\n\n  async save({\n    mediaId\n  }) {\n    return this.request.post(`/web/save/${mediaId}/save/`);\n  }\n\n  async unsave({\n    mediaId\n  }) {\n    return this.request.post(`/web/save/${mediaId}/unsave/`);\n  }\n\n  async search({\n    query,\n    context = 'blended'\n  }) {\n    return this.request('/web/search/topsearch/', {\n      qs: {\n        query,\n        context\n      }\n    });\n  }\n\n  async _getPosts({\n    userId,\n    perPage = 12,\n    nextPageToken\n  }) {\n    const variables = JSON.stringify({\n      id: userId,\n      first: perPage,\n      after: nextPageToken\n    });\n    const options = {\n      qs: {\n        query_hash: '42323d64886122307be10013ad2dcc44',\n        variables\n      }\n    };\n    return this.request.get('/graphql/query/', options).then(response => response.data.user);\n  }\n\n  async getPrivateProfilesFollowRequests(cursor) {\n    const cursorParam = cursor ? `&cursor=${cursor}` : '';\n    return this.request(`accounts/access_tool/current_follow_requests?__a=1${cursorParam}`);\n  }\n\n}\n\nmodule.exports = Instagram;","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/node_modules/instagram-web-api/lib/index.js"],"names":["fs","require","crypto","request","Cookie","isUrl","useragentFromSeed","baseUrl","Instagram","constructor","username","password","cookieStore","language","proxy","requestOptions","credentials","jar","setCookie","cookie","value","csrftoken","getCookies","find","key","userAgent","undefined","uri","headers","Referer","json","defaults","login","_sharedData","resolveWithFullResponse","then","res","pattern","RegExp","matches","toJSON","body","match","substring","createEncPassword","pwd","Date","now","post","form","enc_password","Error","cookies","map","parse","_getSharedData","url","html","split","JSON","_getGis","path","rhx_gis","createHash","update","digest","logout","_getHomeData","queryHash","variables","qs","query_hash","stringify","data","getHome","mediaItemCursor","fetch_media_item_cursor","getUserByUsername","referer","graphql","user","getStoryReelFeed","onlyStories","only_stories","feed_reels_tray","edge_reels_tray_to_reel","edges","edge","node","getStoryReels","reelIds","tagNames","locationIds","precomposedOverlay","reel_ids","tag_names","location_ids","precomposed_overlay","reels_media","getUserIdPhotos","id","first","after","getPhotosByHashtag","hashtag","tag_name","getPhotosByUsername","getStoryItemsByUsername","getStoryItemsByReel","reelId","getStoryItemsByHashtag","reels","length","items","getStoryItemsByLocation","locationId","markStoryItemAsSeen","reelMediaId","reelMediaOwnerId","reelMediaTakenAt","viewSeenAt","_getFollowData","fieldName","count","page_info","getFollowers","userId","getFollowings","getChainsData","user_id","include_chaining","include_reel","include_suggested_users","include_logged_out_extras","include_highlight_reels","edge_chaining","getActivity","getProfile","form_data","updateProfile","name","email","phoneNumber","gender","biography","website","similarAccountSuggestions","first_name","phone_number","external_url","chaining_enabled","changeProfilePhoto","photo","formData","profile_pic","createReadStream","deleteMedia","mediaId","_uploadPhoto","uploadId","file","get","encoding","readFileSync","ruploadParams","media_type","upload_id","toString","upload_media_height","upload_media_width","xsharing_user_ids","image_compression","lib_name","lib_version","quality","nameEntity","Math","random","headersPhoto","offset","byteLength","toFixed","responseUpload","method","e","uploadPhoto","caption","dateObj","toISOString","replace","getTimezoneOffset","timezone_offset","date_time_original","date_time_digitalized","source_type","edits","crop_original_size","crop_center","crop_zoom","response","getMediaFeedByLocation","location","getMediaFeedByHashtag","locationSearch","query","latitude","longitude","distance","search_query","venues","getMediaByShortcode","shortcode","shortcode_media","getMediaComments","media","edge_media_to_parent_comment","getMediaLikes","edge_liked_by","addComment","text","replyToCommentId","comment_text","replied_to_comment_id","deleteComment","commentId","getChallenge","challengeUrl","_navigateChallenge","endpoint","updateChallenge","choice","securityCode","security_code","resetChallenge","replayChallenge","approve","ignore","follow","unfollow","block","unblock","like","unlike","save","unsave","search","context","_getPosts","perPage","nextPageToken","options","getPrivateProfilesFollowRequests","cursor","cursorParam","module","exports"],"mappings":"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","sourcesContent":["// Native\nconst fs = require('fs')\nconst crypto = require('crypto')\n\n// Packages\nconst request = require('request-promise-native')\nconst { Cookie } = require('tough-cookie')\nconst isUrl = require('is-url')\nconst useragentFromSeed = require('useragent-from-seed')\n\nconst baseUrl = 'https://www.instagram.com'\n\nclass Instagram {\n  constructor(\n    { username, password, cookieStore },\n    { language, proxy, requestOptions } = {}\n  ) {\n    this.credentials = {\n      username,\n      password\n    }\n\n    const jar = request.jar(cookieStore)\n    jar.setCookie(request.cookie('ig_cb=1'), baseUrl)\n    const { value: csrftoken } =\n      jar.getCookies(baseUrl).find(({ key }) => key === 'csrftoken') || {}\n\n    const userAgent = useragentFromSeed(username)\n    if (requestOptions === undefined) {\n      requestOptions = {}\n    }\n    requestOptions.baseUrl = baseUrl\n    requestOptions.uri = ''\n    requestOptions.headers = {\n      'User-Agent': userAgent,\n      'Accept-Language': language || 'en-US',\n      'X-Instagram-AJAX': 1,\n      'X-CSRFToken': csrftoken,\n      'X-Requested-With': 'XMLHttpRequest',\n      Referer: baseUrl\n    }\n    requestOptions.proxy = proxy\n    requestOptions.jar = jar\n    requestOptions.json = true\n    this.request = request.defaults(requestOptions)\n  }\n\n  async login({ username, password } = {}, { _sharedData = true } = {}) {\n    username = username || this.credentials.username\n    password = password || this.credentials.password\n\n    // Get CSRFToken from cookie before login\n    let value\n    await this.request('/', { resolveWithFullResponse: true }).then(res => {\n      const pattern = new RegExp(/(csrf_token\":\")\\w+/)\n      const matches = res.toJSON().body.match(pattern)\n      value = matches[0].substring(13)\n    })\n\n    // Provide CSRFToken for login or challenge request\n    this.request = this.request.defaults({\n      headers: { 'X-CSRFToken': value }\n    })\n\n    // Temporary work around for https://github.com/jlobos/instagram-web-api/issues/118\n    const createEncPassword = pwd => {\n      return `#PWD_INSTAGRAM_BROWSER:0:${Date.now()}:${pwd}`\n    }\n\n    // Login\n    const res = await this.request.post('/accounts/login/ajax/', {\n      resolveWithFullResponse: true,\n      form: { username, enc_password: createEncPassword(password) }\n    })\n\n    if (!res.headers['set-cookie']) {\n      throw new Error('No cookie')\n    }\n    const cookies = res.headers['set-cookie'].map(Cookie.parse)\n\n    // Get CSRFToken after successful login\n    const { value: csrftoken } = cookies\n      .find(({ key }) => key === 'csrftoken')\n      .toJSON()\n\n    // Provide CSRFToken to request\n    this.request = this.request.defaults({\n      headers: { 'X-CSRFToken': csrftoken }\n    })\n\n    this.credentials = {\n      username,\n      password,\n      // Add cookies to credentials\n      cookies: cookies.map(cookie => cookie.toJSON())\n    }\n\n    // Provide _sharedData\n    if (_sharedData) {\n      this._sharedData = await this._getSharedData()\n    }\n\n    return res.body\n  }\n\n  async _getSharedData(url = '/') {\n    return this.request(url)\n      .then(\n        html => html.split('window._sharedData = ')[1].split(';</script>')[0]\n      )\n      .then(_sharedData => JSON.parse(_sharedData))\n  }\n\n  async _getGis(path) {\n    const { rhx_gis } = this._sharedData || (await this._getSharedData(path))\n\n    return crypto\n      .createHash('md5')\n      .update(`${rhx_gis}:${path}`)\n      .digest('hex')\n  }\n\n  async logout() {\n    return this.request('/accounts/logout/ajax/')\n  }\n\n  async _getHomeData({ queryHash, variables }) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: queryHash,\n        variables: JSON.stringify(variables)\n      }\n    }).then(data => data)\n  }\n\n  async getHome(mediaItemCursor) {\n    return this._getHomeData({\n      queryHash: '01b3ccff4136c4adf5e67e1dd7eab68d',\n      variables: {\n        fetch_media_item_cursor: mediaItemCursor\n      }\n    })\n  }\n\n  async getUserByUsername({ username }) {\n    return this.request({\n      uri: `/${username}/?__a=1`,\n      headers: {\n        referer: baseUrl + '/' + username + '/',\n        'x-instagram-gis': await this._getGis(`/${username}/`)\n      }\n    }).then(data => data.graphql.user)\n  }\n\n  async getStoryReelFeed({ onlyStories = false } = {}) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: '60b755363b5c230111347a7a4e242001',\n        variables: JSON.stringify({\n          only_stories: onlyStories\n        })\n      }\n    })\n      .then(data => data.data.user.feed_reels_tray.edge_reels_tray_to_reel)\n      .then(edge_reels_tray_to_reel => edge_reels_tray_to_reel.edges)\n      .then(edges => edges.map(edge => edge.node))\n  }\n\n  async getStoryReels({\n    reelIds = [],\n    tagNames = [],\n    locationIds = [],\n    precomposedOverlay = false\n  } = {}) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: '297c491471fff978fa2ab83c0673a618',\n        variables: JSON.stringify({\n          reel_ids: reelIds,\n          tag_names: tagNames,\n          location_ids: locationIds,\n          precomposed_overlay: precomposedOverlay\n        })\n      }\n    }).then(data => data.data.reels_media)\n  }\n\n  async getUserIdPhotos({ id, first = 12, after = '' } = {}) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: '6305d415e36c0a5f0abb6daba312f2dd',\n        variables: JSON.stringify({\n          id,\n          first,\n          after\n        })\n      }\n    }).then(data => data.data)\n  }\n\n  async getPhotosByHashtag({ hashtag, first = 12, after = '' } = {}) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: 'ded47faa9a1aaded10161a2ff32abb6b',\n        variables: JSON.stringify({\n          tag_name: hashtag,\n          first,\n          after\n        })\n      }\n    }).then(data => data.data)\n  }\n\n  async getPhotosByUsername({ username, first, after }) {\n    const user = await this.getUserByUsername({ username })\n    return this.getUserIdPhotos({ id: user.id, first, after })\n  }\n\n  async getStoryItemsByUsername({ username }) {\n    const user = await this.getUserByUsername({ username })\n    return this.getStoryItemsByReel({ reelId: user.id })\n  }\n\n  async getStoryItemsByHashtag({ hashtag }) {\n    const reels = await this.getStoryReels({ tagNames: [hashtag] })\n    if (reels.length === 0) return []\n    return reels[0].items\n  }\n\n  async getStoryItemsByLocation({ locationId }) {\n    const reels = await this.getStoryReels({ locationIds: [locationId] })\n    if (reels.length === 0) return []\n    return reels[0].items\n  }\n\n  async getStoryItemsByReel({ reelId }) {\n    const reels = await this.getStoryReels({ reelIds: [reelId] })\n    if (reels.length === 0) return []\n    return reels[0].items\n  }\n\n  async markStoryItemAsSeen({\n    reelMediaId,\n    reelMediaOwnerId,\n    reelId,\n    reelMediaTakenAt,\n    viewSeenAt\n  }) {\n    return this.request.post('/stories/reel/seen', {\n      form: {\n        reelMediaId,\n        reelMediaOwnerId,\n        reelId,\n        reelMediaTakenAt,\n        viewSeenAt\n      }\n    })\n  }\n\n  async _getFollowData({ fieldName, queryHash, variables }) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: queryHash,\n        variables: JSON.stringify(variables)\n      }\n    })\n      .then(data => data.data.user[fieldName])\n      .then(({ count, page_info, edges }) => ({\n        count,\n        page_info,\n        data: edges.map(edge => edge.node)\n      }))\n  }\n\n  async getFollowers({ userId, first = 20, after }) {\n    return this._getFollowData({\n      fieldName: 'edge_followed_by',\n      queryHash: '37479f2b8209594dde7facb0d904896a',\n      variables: {\n        id: userId,\n        first,\n        after\n      }\n    })\n  }\n\n  async getFollowings({ userId, first = 20, after }) {\n    return this._getFollowData({\n      fieldName: 'edge_follow',\n      queryHash: '58712303d941c6855d4e888c5f0cd22f',\n      variables: {\n        id: userId,\n        first,\n        after\n      }\n    })\n  }\n\n  async getChainsData({ userId }) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: '7c16654f22c819fb63d1183034a5162f',\n        variables: JSON.stringify({\n          user_id: userId,\n          include_chaining: true,\n          include_reel: false,\n          include_suggested_users: false,\n          include_logged_out_extras: false,\n          include_highlight_reels: false\n        })\n      }\n    })\n      .then(data => data.data.user.edge_chaining)\n      .then(({ edges }) => edges.map(edge => edge.node))\n  }\n\n  async getActivity() {\n    return this.request('/accounts/activity/?__a=1').then(\n      data => data.graphql.user\n    )\n  }\n\n  async getProfile() {\n    return this.request('/accounts/edit/?__a=1').then(data => data.form_data)\n  }\n\n  async updateProfile({\n    name = '',\n    email = '',\n    username,\n    phoneNumber = '',\n    gender,\n    biography = '',\n    website = '',\n    similarAccountSuggestions = true\n  }) {\n    return this.request.post('/accounts/edit/', {\n      form: {\n        first_name: name,\n        email,\n        username: username || this.credentials.username,\n        phone_number: phoneNumber,\n        gender,\n        biography,\n        external_url: website,\n        chaining_enabled: similarAccountSuggestions\n      }\n    })\n  }\n\n  async changeProfilePhoto({ photo }) {\n    return this.request.post('/accounts/web_change_profile_picture/', {\n      formData: {\n        profile_pic: isUrl(photo) ? request(photo) : fs.createReadStream(photo)\n      }\n    })\n  }\n\n  async deleteMedia({ mediaId }) {\n    return this.request.post(`/create/${mediaId}/delete/`)\n  }\n\n  async _uploadPhoto({ photo }) {\n    // Warning! don't change anything bellow.\n    const uploadId = Date.now()\n\n    let file\n\n    // Needed to new method, if image is from url.\n    if (isUrl(photo)) {\n      // Enconding: null is required, only this way a Buffer is returned\n      file = await request.get({ url: photo, encoding: null })\n    } else {\n      file = await fs.readFileSync(photo)\n    }\n\n    const ruploadParams = {\n      media_type: 1,\n      upload_id: uploadId.toString(),\n      upload_media_height: 1080,\n      upload_media_width: 1080,\n      xsharing_user_ids: JSON.stringify([]),\n      image_compression: JSON.stringify({\n        lib_name: 'moz',\n        lib_version: '3.1.m',\n        quality: '80'\n      })\n    }\n\n    const nameEntity = `${uploadId}_0_${Math.random(1000000000, 9999999999)}`\n\n    const headersPhoto = {\n      'x-entity-type': 'image/jpeg',\n      offset: 0,\n      'x-entity-name': nameEntity,\n      'x-instagram-rupload-params': JSON.stringify(ruploadParams),\n      'x-entity-length': file.byteLength,\n      'Content-Length': file.byteLength,\n      'Content-Type': 'application/octet-stream',\n      'x-ig-app-id': `1217981644879628`,\n      'Accept-Encoding': 'gzip',\n      'X-Pigeon-Rawclienttime': (Date.now() / 1000).toFixed(3),\n      'X-IG-Connection-Speed': `${Math.random(1000, 3700)}kbps`,\n      'X-IG-Bandwidth-Speed-KBPS': '-1.000',\n      'X-IG-Bandwidth-TotalBytes-B': '0',\n      'X-IG-Bandwidth-TotalTime-MS': '0'\n    }\n\n    // Json = false, must be important to post work!\n    let responseUpload = await this.request({\n      uri: `/rupload_igphoto/${nameEntity}`,\n      headers: headersPhoto,\n      method: 'POST',\n      json: false,\n      body: file\n    })\n\n    try {\n      responseUpload = JSON.parse(responseUpload)\n\n      if ('upload_id' in responseUpload) return responseUpload\n\n      throw new Error('Image upload error')\n    } catch (e) {\n      throw new Error(`Image upload error: ${e}`)\n    }\n  }\n\n  // Upload to story moved to uploadPhoto\n  // Post: 'feed' or 'story'\n  async uploadPhoto({ photo, caption = '', post = 'feed' }) {\n    const dateObj = new Date()\n    const now = dateObj\n      .toISOString()\n      .replace(/T/, ' ')\n      .replace(/\\..+/, ' ')\n    const offset = dateObj.getTimezoneOffset()\n\n    const responseUpload = await this._uploadPhoto({ photo })\n\n    return this.request\n      .post(\n        `/create/${post === 'feed' ? 'configure/' : 'configure_to_story/'}`,\n        {\n          form: {\n            upload_id: responseUpload.upload_id,\n            caption,\n            timezone_offset: offset,\n            date_time_original: now,\n            date_time_digitalized: now,\n            source_type: '4',\n            edits: {\n              crop_original_size: [1080, 1080],\n              crop_center: [0.0, -0.0],\n              crop_zoom: 1.0\n            }\n          }\n        }\n      )\n      .then(response => response)\n  }\n\n  async getMediaFeedByLocation({ locationId }) {\n    return this.request(`/explore/locations/${locationId}/?__a=1`).then(\n      data => data.graphql.location\n    )\n  }\n\n  async getMediaFeedByHashtag({ hashtag }) {\n    return this.request(`/explore/tags/${hashtag}/?__a=1`).then(\n      data => data.graphql.hashtag\n    )\n  }\n\n  async locationSearch({ query, latitude, longitude, distance = 500 }) {\n    return this.request('/location_search/', {\n      qs: { search_query: query, latitude, longitude, distance }\n    }).then(data => data.venues)\n  }\n\n  async getMediaByShortcode({ shortcode }) {\n    return this.request(`/p/${shortcode}/?__a=1`).then(\n      data => data.graphql.shortcode_media\n    )\n  }\n\n  async getMediaComments({ shortcode, first = 12, after = '' }) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: 'bc3296d1ce80a24b1b6e40b1e72903f5',\n        variables: JSON.stringify({ shortcode, first, after })\n      }\n    })\n      .then(response => response.data.shortcode_media || {})\n      .then(media => media.edge_media_to_parent_comment || {})\n      .then(({ count = 0, page_info = {}, edges = [] }) => ({\n        count,\n        page_info,\n        edges\n      }))\n  }\n\n  async getMediaLikes({ shortcode, first = 12, after = '' }) {\n    return this.request('/graphql/query/', {\n      qs: {\n        query_hash: 'd5d763b1e2acf209d62d22d184488e57',\n        variables: JSON.stringify({\n          shortcode,\n          first,\n          after\n        })\n      }\n    })\n      .then(response => response.data.shortcode_media || {})\n      .then(media => media.edge_liked_by || {})\n      .then(({ count = 0, page_info = {}, edges = [] }) => ({\n        count,\n        page_info,\n        edges\n      }))\n  }\n\n  async addComment({ mediaId, text, replyToCommentId }) {\n    return this.request.post(`/web/comments/${mediaId}/add/`, {\n      form: { comment_text: text, replied_to_comment_id: replyToCommentId }\n    })\n  }\n\n  async deleteComment({ mediaId, commentId }) {\n    return this.request.post(`/web/comments/${mediaId}/delete/${commentId}/`)\n  }\n\n  async getChallenge({ challengeUrl }) {\n    return this.request(`${challengeUrl}?__a=1`)\n  }\n\n  async _navigateChallenge({ challengeUrl, endpoint, form }) {\n    const url = endpoint\n      ? challengeUrl.replace('/challenge/', `/challenge/${endpoint}/`)\n      : challengeUrl\n    return this.request.post(url, {\n      headers: {\n        Referer: `${baseUrl}${challengeUrl}`\n      },\n      form\n    })\n  }\n\n  async updateChallenge({ challengeUrl, choice, securityCode }) {\n    const form = securityCode ? { security_code: securityCode } : { choice }\n\n    return this._navigateChallenge({\n      challengeUrl,\n      form\n    })\n  }\n\n  async resetChallenge({ challengeUrl }) {\n    return this._navigateChallenge({\n      challengeUrl,\n      endpoint: 'reset'\n    })\n  }\n\n  async replayChallenge({ challengeUrl }) {\n    return this._navigateChallenge({\n      challengeUrl,\n      endpoint: 'replay'\n    })\n  }\n\n  async approve({ userId }) {\n    return this.request.post(`/web/friendships/${userId}/approve/`)\n  }\n\n  async ignore({ userId }) {\n    return this.request.post(`/web/friendships/${userId}/ignore/`)\n  }\n\n  async follow({ userId }) {\n    return this.request.post(`/web/friendships/${userId}/follow/`)\n  }\n\n  async unfollow({ userId }) {\n    return this.request.post(`/web/friendships/${userId}/unfollow/`)\n  }\n\n  async block({ userId }) {\n    return this.request.post(`/web/friendships/${userId}/block/`)\n  }\n\n  async unblock({ userId }) {\n    return this.request.post(`/web/friendships/${userId}/unblock/`)\n  }\n\n  async like({ mediaId }) {\n    return this.request.post(`/web/likes/${mediaId}/like/`)\n  }\n\n  async unlike({ mediaId }) {\n    return this.request.post(`/web/likes/${mediaId}/unlike/`)\n  }\n\n  async save({ mediaId }) {\n    return this.request.post(`/web/save/${mediaId}/save/`)\n  }\n\n  async unsave({ mediaId }) {\n    return this.request.post(`/web/save/${mediaId}/unsave/`)\n  }\n\n  async search({ query, context = 'blended' }) {\n    return this.request('/web/search/topsearch/', { qs: { query, context } })\n  }\n\n  async _getPosts({ userId, perPage = 12, nextPageToken }) {\n    const variables = JSON.stringify({\n      id: userId,\n      first: perPage,\n      after: nextPageToken\n    })\n    const options = {\n      qs: {\n        query_hash: '42323d64886122307be10013ad2dcc44',\n        variables\n      }\n    }\n\n    return this.request\n      .get('/graphql/query/', options)\n      .then(response => response.data.user)\n  }\n\n  async getPrivateProfilesFollowRequests(cursor) {\n    const cursorParam = cursor ? `&cursor=${cursor}` : ''\n    return this.request(\n      `accounts/access_tool/current_follow_requests?__a=1${cursorParam}`\n    )\n  }\n}\n\nmodule.exports = Instagram\n"]},"metadata":{},"sourceType":"script"}