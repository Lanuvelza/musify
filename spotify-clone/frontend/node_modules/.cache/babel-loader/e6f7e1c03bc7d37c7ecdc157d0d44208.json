{"ast":null,"code":"var _jsxFileName = \"/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Footer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport \"./styles/Footer.css\";\nimport SpotifyPlayer from 'react-spotify-web-playback'; // import { \n//   PlayCircleOutline,\n//   SkipPrevious,\n//   SkipNext,\n//   PlaylistPlay,\n//   Shuffle,\n//   Repeat,\n//   VolumeDown,\n// } from \"@material-ui/icons\";\n// import { Grid, Slider } from \"@material-ui/core\";\n\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Footer() {\n  _s();\n\n  const [{\n    token,\n    playing,\n    uri\n  }, dispatch] = useDataLayerValue();\n  console.log(token);\n  console.log(playing);\n  console.log(uri);\n  useEffect(() => {\n    dispatch({\n      type: \"SET_PLAYING\",\n      playing: true\n    });\n  }, [uri]);\n\n  if (!token) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    // <div className=\"footer\">\n    //   <div className=\"footer__left\">\n    //     <img \n    //       src=\"https://i.pinimg.com/originals/8d/c7/52/8dc752834195102e4cb630a53221255e.jpg\"\n    //       alt=\"\"\n    //       className=\"footer__albumLogo\"\n    //     />\n    //     <div className=\"footer__songInfo\">\n    //       <h4>My fav song</h4>\n    //       <p>Atharva</p>\n    //     </div>\n    //   </div>\n    //   <div className=\"footer__center\">\n    //     <Shuffle className=\"footer__green\" />\n    //     <SkipPrevious className=\"footer_icon\" />\n    //     <PlayCircleOutline fontSize=\"large\" className=\"footer__icon\" />\n    //     <SkipNext className=\"footer__icon\" />\n    //     <Repeat className=\"footer__green\" />\n    //   </div>\n    //   <div className=\"footer__right\">\n    //     <Grid container spacing={2}>\n    //       <Grid item> \n    //         <PlaylistPlay />\n    //       </Grid>\n    //       <Grid item> \n    //         <VolumeDown />\n    //       </Grid>\n    //       <Grid item xs> \n    //         <Slider />\n    //       </Grid>\n    //     </Grid>\n    //   </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n        token: token,\n        callback: state => {\n          if (!state.isPlaying) {\n            dispatch({\n              type: \"SET_PLAYING\",\n              playing: false\n            });\n          }\n\n          if (state.track) {\n            dispatch({\n              type: \"SET_CURRENT_TRACK\",\n              current_track: state.track\n            });\n          }\n        },\n        play: playing,\n        uris: uri ? [uri] : [],\n        styles: {\n          height: '85px',\n          bgColor: '#282828',\n          color: '#1ed15e',\n          sliderColor: '#1ed15e',\n          sliderHandleColor: '#282828',\n          trackNameColor: 'white',\n          trackArtistColor: 'white',\n          errorColor: 'white'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(Footer, \"7i9uycp5MdF3NcluG+SlirnBEeo=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Footer;\nexport default Footer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Footer\");","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Footer.js"],"names":["React","useEffect","SpotifyPlayer","useDataLayerValue","Footer","token","playing","uri","dispatch","console","log","type","state","isPlaying","track","current_track","height","bgColor","color","sliderColor","sliderHandleColor","trackNameColor","trackArtistColor","errorColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,qBAAP;AACA,OAAOC,aAAP,MAA0B,4BAA1B,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,QAAkC,0BAAlC;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAM,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,EAAwBC,QAAxB,IAAoCL,iBAAiB,EAA3D;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,aADC;AAEPL,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GALQ,EAKN,CAACC,GAAD,CALM,CAAT;;AAOA,MAAI,CAACF,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE,QAAC,aAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,QAAQ,EAAEO,KAAK,IAAI;AACjB,cAAI,CAACA,KAAK,CAACC,SAAX,EAAsB;AACpBL,YAAAA,QAAQ,CAAC;AACPG,cAAAA,IAAI,EAAE,aADC;AAEPL,cAAAA,OAAO,EAAE;AAFF,aAAD,CAAR;AAID;;AACD,cAAIM,KAAK,CAACE,KAAV,EAAiB;AACfN,YAAAA,QAAQ,CAAC;AACPG,cAAAA,IAAI,EAAE,mBADC;AAEPI,cAAAA,aAAa,EAAEH,KAAK,CAACE;AAFd,aAAD,CAAR;AAID;AACF,SAfH;AAgBE,QAAA,IAAI,EAAER,OAhBR;AAiBE,QAAA,IAAI,EAAEC,GAAG,GAAG,CAACA,GAAD,CAAH,GAAW,EAjBtB;AAkBE,QAAA,MAAM,EAAE;AACNS,UAAAA,MAAM,EAAE,MADF;AAENC,UAAAA,OAAO,EAAE,SAFH;AAGNC,UAAAA,KAAK,EAAE,SAHD;AAINC,UAAAA,WAAW,EAAE,SAJP;AAKNC,UAAAA,iBAAiB,EAAE,SALb;AAMNC,UAAAA,cAAc,EAAE,OANV;AAONC,UAAAA,gBAAgB,EAAE,OAPZ;AAQNC,UAAAA,UAAU,EAAE;AARN;AAlBV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAlCF;AAkED;;GAnFQnB,M;UACmCD,iB;;;KADnCC,M;AAqFT,eAAeA,MAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./styles/Footer.css\"\nimport SpotifyPlayer from 'react-spotify-web-playback';\n// import { \n//   PlayCircleOutline,\n//   SkipPrevious,\n//   SkipNext,\n//   PlaylistPlay,\n//   Shuffle,\n//   Repeat,\n//   VolumeDown,\n// } from \"@material-ui/icons\";\n// import { Grid, Slider } from \"@material-ui/core\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\n\nfunction Footer() {\n  const [{token, playing, uri}, dispatch] = useDataLayerValue();\n  console.log(token);\n  console.log(playing);\n  console.log(uri);\n\n  useEffect(() => {\n    dispatch({\n      type: \"SET_PLAYING\",\n      playing: true\n    })\n  }, [uri])\n\n  if (!token) {\n    return null; \n  }\n\n  return ( \n    // <div className=\"footer\">\n    //   <div className=\"footer__left\">\n    //     <img \n    //       src=\"https://i.pinimg.com/originals/8d/c7/52/8dc752834195102e4cb630a53221255e.jpg\"\n    //       alt=\"\"\n    //       className=\"footer__albumLogo\"\n    //     />\n    //     <div className=\"footer__songInfo\">\n    //       <h4>My fav song</h4>\n    //       <p>Atharva</p>\n    //     </div>\n    //   </div>\n    //   <div className=\"footer__center\">\n    //     <Shuffle className=\"footer__green\" />\n    //     <SkipPrevious className=\"footer_icon\" />\n    //     <PlayCircleOutline fontSize=\"large\" className=\"footer__icon\" />\n    //     <SkipNext className=\"footer__icon\" />\n    //     <Repeat className=\"footer__green\" />\n    //   </div>\n    //   <div className=\"footer__right\">\n    //     <Grid container spacing={2}>\n    //       <Grid item> \n    //         <PlaylistPlay />\n    //       </Grid>\n    //       <Grid item> \n    //         <VolumeDown />\n    //       </Grid>\n    //       <Grid item xs> \n    //         <Slider />\n    //       </Grid>\n    //     </Grid>\n    //   </div>\n    // </div>\n    <div className=\"footer\">    \n      <SpotifyPlayer \n        token={token}\n        callback={state => {\n          if (!state.isPlaying) {\n            dispatch({\n              type: \"SET_PLAYING\",\n              playing: false\n            })\n          }\n          if (state.track) {\n            dispatch({\n              type: \"SET_CURRENT_TRACK\",\n              current_track: state.track\n            });\n          }\n        }}\n        play={playing}\n        uris={uri ? [uri] : []} \n        styles={{\n          height: '85px',\n          bgColor: '#282828',\n          color: '#1ed15e',\n          sliderColor: '#1ed15e',\n          sliderHandleColor: '#282828',\n          trackNameColor: 'white',\n          trackArtistColor: 'white',\n          errorColor: 'white',\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Footer; "]},"metadata":{},"sourceType":"module"}