{"ast":null,"code":"var _jsxFileName = \"/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Album.js\",\n    _s = $RefreshSig$();\n\nimport { Grid } from \"@material-ui/core\";\nimport { AlbumSharp, DragHandle, PlayCircleFilled } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport \"./styles/Album.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Album({\n  album,\n  spotify\n}) {\n  _s();\n\n  const [{}, dispatch] = useDataLayerValue(); // Sort by latest release date\n\n  albums.sort((a, b) => {\n    if (a.release_date < b.release_date) {\n      return 1;\n    }\n\n    if (a.release_date > b.release_date) {\n      return -1;\n    }\n\n    return 0;\n  });\n\n  const handleClick = () => {\n    spotify.getAlbum(albums[0].id).then(album => {\n      console.log(album);\n      console.log(album.tracks);\n      dispatch({\n        type: \"SET_ALBUM\",\n        album\n      });\n      dispatch({\n        type: \"SET_TRACKS\",\n        tracks: album.tracks.items\n      });\n    });\n  };\n\n  const playAlbum = () => {\n    spotify.getAlbum(albums[0].id).then(album => {\n      console.log(album);\n      console.log(album.tracks);\n      console.log(album.uri);\n      dispatch({\n        type: \"SET_ALBUM\",\n        album\n      });\n      dispatch({\n        type: \"SET_TRACKS\",\n        tracks: album.tracks.items\n      });\n      dispatch({\n        type: \"SET_URI\",\n        uri: album.uri\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"latestalbum__info\",\n    children: [albums ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: albums[0].images[0].url,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"latestalbum__infoText\",\n      children: albums ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Latest Release\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: handleClick,\n          children: albums[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PlayCircleFilled, {\n          className: \"latestalbum__playButton\",\n          onClick: playAlbum\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Album, \"IdhM3eYXGcHiEgwsxfsb2XobvQY=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Album;\nexport default Album;\n\nvar _c;\n\n$RefreshReg$(_c, \"Album\");","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Album.js"],"names":["Grid","AlbumSharp","DragHandle","PlayCircleFilled","React","useDataLayerValue","Album","album","spotify","dispatch","albums","sort","a","b","release_date","handleClick","getAlbum","id","then","console","log","tracks","type","items","playAlbum","uri","images","url","name"],"mappings":"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","sourcesContent":["import { Grid } from \"@material-ui/core\";\nimport { AlbumSharp, DragHandle, PlayCircleFilled } from \"@material-ui/icons\";\nimport React from \"react\"; \nimport { useDataLayerValue } from \"../../contexts/DataLayer\"; \nimport \"./styles/Album.css\"; \n\n\n\nfunction Album({album, spotify}) {\n  const [{}, dispatch] = useDataLayerValue(); \n\n  // Sort by latest release date\n  albums.sort((a, b) => {\n    if (a.release_date < b.release_date) {\n      return 1;\n    }\n    if (a.release_date > b.release_date) {\n      return -1;\n    }\n    return 0;\n  })\n\n  const handleClick = () => {\n    spotify.getAlbum(albums[0].id)\n    .then((album) => {\n      console.log(album);\n      console.log(album.tracks);\n      dispatch({\n        type: \"SET_ALBUM\",\n        album\n      });\n      dispatch({\n        type: \"SET_TRACKS\",\n        tracks: album.tracks.items\n      })\n    });\n  }\n\n  const playAlbum = () => {\n    spotify.getAlbum(albums[0].id)\n    .then((album) => {\n      console.log(album);\n      console.log(album.tracks);\n      console.log(album.uri);\n      dispatch({\n        type: \"SET_ALBUM\",\n        album\n      });\n      dispatch({\n        type: \"SET_TRACKS\",\n        tracks: album.tracks.items\n      });\n      \n      dispatch({\n        type: \"SET_URI\", \n        uri: album.uri\n      });\n    });\n  }\n\n  return (\n    <div className=\"latestalbum__info\">\n      {albums ? \n      <img \n        src={albums[0].images[0].url} \n        onClick={handleClick}\n      /> : null}\n      <div className=\"latestalbum__infoText\">\n        {albums ? \n        <>\n          <h1><strong>Latest Release</strong></h1>\n          <h2 onClick={handleClick} >{albums[0].name}</h2>\n          <PlayCircleFilled className={\"latestalbum__playButton\"} onClick={playAlbum} />\n        </> : null }\n      </div>\n    </div>\n  );\n}\n\nexport default Album; "]},"metadata":{},"sourceType":"module"}