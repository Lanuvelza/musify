{"ast":null,"code":"var _jsxFileName = \"/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Search } from \"@material-ui/icons\";\nimport \"./styles/Header.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst findArtistByName = (artists, name) => {\n  console.log(artists.filter(artist => {\n    console.log(artist.name.toLowerCase());\n    console.log(name.toLowerCase());\n    return artist.name.toLowerCase() === name.toLowerCase;\n  }));\n  return artists.filter(artist => artist.name.toLowerCase() === name.toLowerCase);\n};\n\nfunction Header({\n  spotify\n}) {\n  _s();\n\n  var _user$images$;\n\n  console.log(spotify);\n  const [{\n    user\n  }, dispatch] = useDataLayerValue();\n  const [search, setSearch] = useState(\"\");\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    spotify.searchArtists(search).then(results => {\n      console.log(results.artists.items);\n      const correctArtist = findArtistByName(results.artists.items, search);\n      console.log(correctArtist);\n      dispatch({\n        type: \"SET_ARTISTS\",\n        artists: results.artists\n      });\n      const artist_id = results.artists.items[0].id;\n      spotify.getArtistAlbums(artist_id, {\n        include_groups: [\"single\", \"album\"]\n      }).then(results => {\n        console.log(\"artist albums\", results);\n        dispatch({\n          type: \"SET_ALBUMS\",\n          albums: results\n        });\n      });\n      spotify.getArtistTopTracks(artist_id, \"US\").then(results => {\n        console.log(\"artist tracks\", results);\n        dispatch({\n          type: \"SET_TRACKS\",\n          tracks: results.tracks\n        });\n      });\n    });\n    dispatch({\n      type: \"SET_CURRENT_PLAYLIST\",\n      current_playlist: null\n    });\n    setSearch(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header__left\",\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        className: \"header__left__searchIcon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Search for an Artist...\",\n          type: \"text\",\n          value: search,\n          onChange: e => {\n            setSearch(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header__right\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: user === null || user === void 0 ? void 0 : (_user$images$ = user.images[0]) === null || _user$images$ === void 0 ? void 0 : _user$images$.url,\n        alt: user === null || user === void 0 ? void 0 : user.display_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: user === null || user === void 0 ? void 0 : user.display_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Header, \"ripTDJNQ3wKFWHlslE+rI/hb4rs=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Header.js"],"names":["React","useState","Search","Avatar","useDataLayerValue","findArtistByName","artists","name","console","log","filter","artist","toLowerCase","Header","spotify","user","dispatch","search","setSearch","handleSubmit","event","preventDefault","searchArtists","then","results","items","correctArtist","type","artist_id","id","getArtistAlbums","include_groups","albums","getArtistTopTracks","tracks","current_playlist","e","target","value","images","url","display_name"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"; \nimport { Search } from \"@material-ui/icons\"; \nimport \"./styles/Header.css\";\nimport { Avatar } from \"@material-ui/core\"; \nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\n\n\nconst findArtistByName = (artists, name) => {\n  console.log(artists.filter(artist => {\n    console.log(artist.name.toLowerCase());\n    console.log(name.toLowerCase());\n    return artist.name.toLowerCase() === name.toLowerCase\n  }))\n  return artists.filter(artist => artist.name.toLowerCase() === name.toLowerCase)\n}\n\n\nfunction Header({ spotify }) {\n  console.log(spotify);\n  const [{ user }, dispatch] = useDataLayerValue(); \n  const [search, setSearch] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    spotify.searchArtists(search)\n    .then((results) => {\n      console.log(results.artists.items);\n\n      const correctArtist = findArtistByName(results.artists.items, search);\n      console.log(correctArtist);\n\n      dispatch({\n        type: \"SET_ARTISTS\",\n        artists: results.artists\n      });\n\n      const artist_id = results.artists.items[0].id; \n      \n      spotify.getArtistAlbums(artist_id, { include_groups: [\"single\", \"album\"] })\n      .then((results) => {\n        console.log(\"artist albums\", results);\n        dispatch({\n          type: \"SET_ALBUMS\", \n          albums: results\n        });\n      });\n      \n      spotify.getArtistTopTracks(artist_id, \"US\")\n      .then((results) => {\n        console.log(\"artist tracks\", results);\n        dispatch({\n          type: \"SET_TRACKS\",\n          tracks: results.tracks\n        });\n      });\n    });\n\n    dispatch({\n      type: \"SET_CURRENT_PLAYLIST\",\n      current_playlist: null\n    });\n\n    setSearch(\"\");\n  }\n\n  return (\n    <div className=\"header\">\n      <div className=\"header__left\">\n         <Search className=\"header__left__searchIcon\"/>\n        <form onSubmit={handleSubmit}>\n         <input \n          placeholder=\"Search for an Artist...\" \n          type=\"text\" \n          value={search} \n          onChange={(e) => {setSearch(e.target.value)}}\n        />\n        </form>\n      </div>\n      <div className=\"header__right\">\n        <Avatar src={user?.images[0]?.url} alt={user?.display_name} />\n        <h4>{user?.display_name}</h4>\n      </div>\n    </div>\n  );\n}\nexport default Header;"]},"metadata":{},"sourceType":"module"}