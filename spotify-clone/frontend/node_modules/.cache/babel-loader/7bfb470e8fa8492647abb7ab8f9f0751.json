{"ast":null,"code":"'use strict';\n\nvar addonCache = require('./cache').addon;\n\nexports.addon = function (renderer) {\n  if (!renderer.cache) {\n    addonCache(renderer);\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    require('./__dev__/warnOnMissingDependencies')('jsx', renderer, ['rule', 'cache']);\n  }\n\n  renderer.jsx = function (fn, styles, block) {\n    var className;\n    var isElement = typeof fn === 'string'; // In dev mode emit CSS immediately so correct sourcemaps can be generated.\n\n    if (process.env.NODE_ENV !== 'production') {\n      className = renderer.rule(styles, block);\n    }\n\n    var Component = function (props) {\n      if (!className) {\n        className = renderer.rule(styles, block);\n      }\n\n      var copy = props;\n      var $as = copy.$as;\n      var $ref = copy.$ref;\n\n      if (process.env.NODE_ENV !== 'production') {\n        copy = renderer.assign({}, props);\n      }\n\n      var dynamicClassName = renderer.cache(props.css);\n      delete copy.css;\n      delete copy.$as;\n\n      if (isElement || $as) {\n        delete copy.$ref;\n        copy.ref = $ref;\n      }\n\n      copy.className = (props.className || '') + className + dynamicClassName;\n      return isElement || $as ? renderer.h($as || fn, copy) : fn(copy);\n    };\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (block) {\n        Component.displayName = 'jsx(' + block + ')';\n      }\n    }\n\n    return Component;\n  };\n};","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/frontend/node_modules/nano-css/addon/jsx.js"],"names":["addonCache","require","addon","exports","renderer","cache","process","env","NODE_ENV","jsx","fn","styles","block","className","isElement","rule","Component","props","copy","$as","$ref","assign","dynamicClassName","css","ref","h","displayName"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,KAApC;;AAEAC,OAAO,CAACD,KAAR,GAAgB,UAAUE,QAAV,EAAoB;AAChC,MAAI,CAACA,QAAQ,CAACC,KAAd,EAAqB;AACjBL,IAAAA,UAAU,CAACI,QAAD,CAAV;AACH;;AAED,MAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCP,IAAAA,OAAO,CAAC,qCAAD,CAAP,CAA+C,KAA/C,EAAsDG,QAAtD,EAAgE,CAAC,MAAD,EAAS,OAAT,CAAhE;AACH;;AAEDA,EAAAA,QAAQ,CAACK,GAAT,GAAe,UAAUC,EAAV,EAAcC,MAAd,EAAsBC,KAAtB,EAA6B;AACxC,QAAIC,SAAJ;AACA,QAAIC,SAAS,GAAG,OAAOJ,EAAP,KAAc,QAA9B,CAFwC,CAIxC;;AACA,QAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCK,MAAAA,SAAS,GAAGT,QAAQ,CAACW,IAAT,CAAcJ,MAAd,EAAsBC,KAAtB,CAAZ;AACH;;AAED,QAAII,SAAS,GAAG,UAAUC,KAAV,EAAiB;AAC7B,UAAI,CAACJ,SAAL,EAAgB;AACZA,QAAAA,SAAS,GAAGT,QAAQ,CAACW,IAAT,CAAcJ,MAAd,EAAsBC,KAAtB,CAAZ;AACH;;AAED,UAAIM,IAAI,GAAGD,KAAX;AACA,UAAIE,GAAG,GAAGD,IAAI,CAACC,GAAf;AACA,UAAIC,IAAI,GAAGF,IAAI,CAACE,IAAhB;;AAEA,UAAId,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCU,QAAAA,IAAI,GAAGd,QAAQ,CAACiB,MAAT,CAAgB,EAAhB,EAAoBJ,KAApB,CAAP;AACH;;AAED,UAAIK,gBAAgB,GAAGlB,QAAQ,CAACC,KAAT,CAAeY,KAAK,CAACM,GAArB,CAAvB;AACA,aAAOL,IAAI,CAACK,GAAZ;AACA,aAAOL,IAAI,CAACC,GAAZ;;AAEA,UAAIL,SAAS,IAAIK,GAAjB,EAAsB;AAClB,eAAOD,IAAI,CAACE,IAAZ;AACAF,QAAAA,IAAI,CAACM,GAAL,GAAWJ,IAAX;AACH;;AAEDF,MAAAA,IAAI,CAACL,SAAL,GAAiB,CAACI,KAAK,CAACJ,SAAN,IAAmB,EAApB,IAA0BA,SAA1B,GAAsCS,gBAAvD;AAEA,aAAQR,SAAS,IAAIK,GAAd,GACDf,QAAQ,CAACqB,CAAT,CAAWN,GAAG,IAAIT,EAAlB,EAAsBQ,IAAtB,CADC,GAEDR,EAAE,CAACQ,IAAD,CAFR;AAGH,KA3BD;;AA6BA,QAAIZ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,UAAII,KAAJ,EAAW;AACPI,QAAAA,SAAS,CAACU,WAAV,GAAwB,SAASd,KAAT,GAAiB,GAAzC;AACH;AACJ;;AAED,WAAOI,SAAP;AACH,GA7CD;AA8CH,CAvDD","sourcesContent":["'use strict';\n\nvar addonCache = require('./cache').addon;\n\nexports.addon = function (renderer) {\n    if (!renderer.cache) {\n        addonCache(renderer);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n        require('./__dev__/warnOnMissingDependencies')('jsx', renderer, ['rule', 'cache']);\n    }\n\n    renderer.jsx = function (fn, styles, block) {\n        var className;\n        var isElement = typeof fn === 'string';\n\n        // In dev mode emit CSS immediately so correct sourcemaps can be generated.\n        if (process.env.NODE_ENV !== 'production') {\n            className = renderer.rule(styles, block);\n        }\n\n        var Component = function (props) {\n            if (!className) {\n                className = renderer.rule(styles, block);\n            }\n\n            var copy = props;\n            var $as = copy.$as;\n            var $ref = copy.$ref;\n\n            if (process.env.NODE_ENV !== 'production') {\n                copy = renderer.assign({}, props);\n            }\n\n            var dynamicClassName = renderer.cache(props.css);\n            delete copy.css;\n            delete copy.$as;\n\n            if (isElement || $as) {\n                delete copy.$ref;\n                copy.ref = $ref;\n            }\n\n            copy.className = (props.className || '') + className + dynamicClassName;\n\n            return (isElement || $as)\n                ? renderer.h($as || fn, copy)\n                : fn(copy);\n        };\n\n        if (process.env.NODE_ENV !== 'production') {\n            if (block) {\n                Component.displayName = 'jsx(' + block + ')';\n            }\n        }\n\n        return Component;\n    };\n};\n"]},"metadata":{},"sourceType":"script"}