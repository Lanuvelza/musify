{"ast":null,"code":"var _jsxFileName = \"/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Search } from \"@material-ui/icons\";\nimport \"./styles/Header.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Header({\n  spotify\n}) {\n  _s();\n\n  var _user$images$;\n\n  const [{\n    user,\n    searchmode\n  }, dispatch] = useDataLayerValue();\n  const [search, setSearch] = useState(\"\");\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    spotify.searchArtists(search).then(results => {\n      console.log(results.artists);\n      dispatch({\n        type: \"SET_ARTISTS\",\n        artists: results.artists\n      });\n    }).then(() => {\n      dispatch({\n        type: \"SET_CURRENT_PLAYLIST\",\n        current_playlist: null\n      });\n      dispatch({\n        type: \"SET_SEARCHING\",\n        searching: true\n      });\n      setSearch(\"\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: searchmode ? \"header__left__searchbar\" : \"header__left\",\n      children: searchmode && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Search, {\n          className: \"header__left__searchbar__searchIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Search for an Artist...\",\n            type: \"text\",\n            value: search,\n            onChange: e => {\n              setSearch(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header__right\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: user === null || user === void 0 ? void 0 : (_user$images$ = user.images[0]) === null || _user$images$ === void 0 ? void 0 : _user$images$.url,\n        alt: user === null || user === void 0 ? void 0 : user.display_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: user === null || user === void 0 ? void 0 : user.display_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Header, \"WomnL21Q0UysaZUZ0FlDyIM/lPA=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/Header.js"],"names":["React","useState","Search","Avatar","useDataLayerValue","Header","spotify","user","searchmode","dispatch","search","setSearch","handleSubmit","event","preventDefault","searchArtists","then","results","console","log","artists","type","current_playlist","searching","e","target","value","images","url","display_name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAO,qBAAP;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,iBAAT,QAAkC,0BAAlC;;;;AAGA,SAASC,MAAT,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA6B;AAAA;;AAAA;;AAC3B,QAAM,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,EAAuBC,QAAvB,IAAmCL,iBAAiB,EAA1D;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMW,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AAEAR,IAAAA,OAAO,CAACS,aAAR,CAAsBL,MAAtB,EACCM,IADD,CACOC,OAAD,IAAa;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,OAApB;AACAX,MAAAA,QAAQ,CAAC;AACPY,QAAAA,IAAI,EAAE,aADC;AAEPD,QAAAA,OAAO,EAAEH,OAAO,CAACG;AAFV,OAAD,CAAR;AAID,KAPD,EAQCJ,IARD,CAQM,MAAM;AAEVP,MAAAA,QAAQ,CAAC;AACPY,QAAAA,IAAI,EAAE,sBADC;AAEPC,QAAAA,gBAAgB,EAAE;AAFX,OAAD,CAAR;AAKAb,MAAAA,QAAQ,CAAC;AACPY,QAAAA,IAAI,EAAE,eADC;AAEPE,QAAAA,SAAS,EAAE;AAFJ,OAAD,CAAR;AAKAZ,MAAAA,SAAS,CAAC,EAAD,CAAT;AACD,KArBD;AAsBD,GAzBD;;AA2BA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEH,UAAU,GAAG,yBAAH,GAA+B,cAAzD;AAAA,gBACGA,UAAU,iBACX;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,QAAQ,EAAEI,YAAhB;AAAA,iCACC;AACC,YAAA,WAAW,EAAC,yBADb;AAEC,YAAA,IAAI,EAAC,MAFN;AAGC,YAAA,KAAK,EAAEF,MAHR;AAIC,YAAA,QAAQ,EAAGc,CAAD,IAAO;AAACb,cAAAA,SAAS,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AAA0B;AAJ7C;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,GAAG,EAAEnB,IAAF,aAAEA,IAAF,wCAAEA,IAAI,CAAEoB,MAAN,CAAa,CAAb,CAAF,kDAAE,cAAiBC,GAA9B;AAAmC,QAAA,GAAG,EAAErB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEsB;AAA9C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKtB,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEsB;AAAX;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GArDQxB,M;UACkCD,iB;;;KADlCC,M;AAsDT,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\"; \nimport { Search } from \"@material-ui/icons\"; \nimport \"./styles/Header.css\";\nimport { Avatar } from \"@material-ui/core\"; \nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\n\n\nfunction Header({ spotify }) {\n  const [{ user, searchmode }, dispatch] = useDataLayerValue(); \n  const [search, setSearch] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    spotify.searchArtists(search)\n    .then((results) => {\n      console.log(results.artists);\n      dispatch({\n        type: \"SET_ARTISTS\",\n        artists: results.artists\n      });\n    })\n    .then(() => {\n\n      dispatch({\n        type: \"SET_CURRENT_PLAYLIST\",\n        current_playlist: null\n      })\n\n      dispatch({\n        type: \"SET_SEARCHING\", \n        searching: true\n      })\n\n      setSearch(\"\");\n    });\n  }\n\n  return (\n    <div className=\"header\">\n      <div className={searchmode ? \"header__left__searchbar\" : \"header__left\"}>\n        {searchmode && \n        <>\n          <Search className=\"header__left__searchbar__searchIcon\"/>\n          <form onSubmit={handleSubmit}>\n           <input \n            placeholder=\"Search for an Artist...\" \n            type=\"text\" \n            value={search} \n            onChange={(e) => {setSearch(e.target.value)}}\n          />\n          </form>\n        </>}\n      </div>\n      <div className=\"header__right\">\n        <Avatar src={user?.images[0]?.url} alt={user?.display_name} />\n        <h4>{user?.display_name}</h4>\n      </div>\n    </div>\n  );\n}\nexport default Header;"]},"metadata":{},"sourceType":"module"}