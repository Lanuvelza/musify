{"ast":null,"code":"'use strict';\n\nconst MAX_INT32 = 2147483647;\nconst MINSTD = 16807;\n\nclass ParkMiller {\n  constructor(seed) {\n    if (!Number.isInteger(seed)) {\n      throw new TypeError('Expected `seed` to be a `integer`');\n    }\n\n    this._seed = seed % MAX_INT32;\n\n    if (this._seed <= 0) {\n      this._seed += MAX_INT32 - 1;\n    }\n  }\n\n  integer() {\n    this._seed *= MINSTD;\n    this._seed %= MAX_INT32;\n    return this._seed;\n  }\n\n  integerInRange(min, max) {\n    return Math.round(this.floatInRange(min, max));\n  }\n\n  float() {\n    return (this.integer() - 1) / (MAX_INT32 - 1);\n  }\n\n  floatInRange(min, max) {\n    return min + (max - min) * this.float();\n  }\n\n  boolean() {\n    return this.integer() % 2 === 0;\n  }\n\n}\n\nmodule.exports = ParkMiller;","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/node_modules/park-miller/index.js"],"names":["MAX_INT32","MINSTD","ParkMiller","constructor","seed","Number","isInteger","TypeError","_seed","integer","integerInRange","min","max","Math","round","floatInRange","float","boolean","module","exports"],"mappings":"AAAA;;AACA,MAAMA,SAAS,GAAG,UAAlB;AACA,MAAMC,MAAM,GAAG,KAAf;;AAEA,MAAMC,UAAN,CAAiB;AAChBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACjB,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiBF,IAAjB,CAAL,EAA6B;AAC5B,YAAM,IAAIG,SAAJ,CAAc,mCAAd,CAAN;AACA;;AAED,SAAKC,KAAL,GAAaJ,IAAI,GAAGJ,SAApB;;AAEA,QAAI,KAAKQ,KAAL,IAAc,CAAlB,EAAqB;AACpB,WAAKA,KAAL,IAAeR,SAAS,GAAG,CAA3B;AACA;AACD;;AAEDS,EAAAA,OAAO,GAAG;AACT,SAAKD,KAAL,IAAcP,MAAd;AACA,SAAKO,KAAL,IAAcR,SAAd;AACA,WAAO,KAAKQ,KAAZ;AACA;;AAEDE,EAAAA,cAAc,CAACC,GAAD,EAAMC,GAAN,EAAW;AACxB,WAAOC,IAAI,CAACC,KAAL,CAAW,KAAKC,YAAL,CAAkBJ,GAAlB,EAAuBC,GAAvB,CAAX,CAAP;AACA;;AAEDI,EAAAA,KAAK,GAAG;AACP,WAAO,CAAC,KAAKP,OAAL,KAAiB,CAAlB,KAAwBT,SAAS,GAAG,CAApC,CAAP;AACA;;AAEDe,EAAAA,YAAY,CAACJ,GAAD,EAAMC,GAAN,EAAW;AACtB,WAAOD,GAAG,GAAI,CAACC,GAAG,GAAGD,GAAP,IAAc,KAAKK,KAAL,EAA5B;AACA;;AAEDC,EAAAA,OAAO,GAAG;AACT,WAAO,KAAKR,OAAL,KAAiB,CAAjB,KAAuB,CAA9B;AACA;;AAjCe;;AAoCjBS,MAAM,CAACC,OAAP,GAAiBjB,UAAjB","sourcesContent":["'use strict';\nconst MAX_INT32 = 2147483647;\nconst MINSTD = 16807;\n\nclass ParkMiller {\n\tconstructor(seed) {\n\t\tif (!Number.isInteger(seed)) {\n\t\t\tthrow new TypeError('Expected `seed` to be a `integer`');\n\t\t}\n\n\t\tthis._seed = seed % MAX_INT32;\n\n\t\tif (this._seed <= 0) {\n\t\t\tthis._seed += (MAX_INT32 - 1);\n\t\t}\n\t}\n\n\tinteger() {\n\t\tthis._seed *= MINSTD;\n\t\tthis._seed %= MAX_INT32;\n\t\treturn this._seed;\n\t}\n\n\tintegerInRange(min, max) {\n\t\treturn Math.round(this.floatInRange(min, max));\n\t}\n\n\tfloat() {\n\t\treturn (this.integer() - 1) / (MAX_INT32 - 1);\n\t}\n\n\tfloatInRange(min, max) {\n\t\treturn min + ((max - min) * this.float());\n\t}\n\n\tboolean() {\n\t\treturn this.integer() % 2 === 0;\n\t}\n}\n\nmodule.exports = ParkMiller;\n"]},"metadata":{},"sourceType":"script"}