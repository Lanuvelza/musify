{"ast":null,"code":"var _jsxFileName = \"/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/LatestAlbum.js\",\n    _s = $RefreshSig$();\n\nimport { Grid } from \"@material-ui/core\";\nimport { AlbumSharp, DragHandle, PlayCircleFilled } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport \"./styles/LatestAlbum.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LatestAlbum({\n  spotify\n}) {\n  _s();\n\n  const [{\n    albums\n  }, dispatch] = useDataLayerValue();\n  console.log(albums);\n  console.log(spotify); // Sort by latest release date\n\n  albums.items.sort((a, b) => {\n    if (a.release_date < b.release_date) {\n      return 1;\n    }\n\n    if (a.release_date > b.release_date) {\n      return -1;\n    }\n\n    return 0;\n  });\n\n  const handleClick = () => {\n    spotify.getAlbum(albums.items[0].id).then(album => {\n      console.log(album);\n      console.log(album.tracks);\n      dispatch({\n        type: \"SET_ALBUM\",\n        album\n      });\n      dispatch({\n        type: \"SET_TRACKS\",\n        tracks: album.tracks.items\n      });\n    });\n  };\n\n  const playAlbum = () => {\n    console.log(albums.items[0].id);\n    spotify;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"latestalbum__info\",\n    children: [albums ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: albums.items[0].images[0].url,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"latestalbum__infoText\",\n      children: albums ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Latest Release\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: handleClick,\n          children: albums.items[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PlayCircleFilled, {\n          className: \"latestalbum__playButton\",\n          onClick: playAlbum\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LatestAlbum, \"BMIGH2FgydEyFSrVTS+NwOXtIdo=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = LatestAlbum;\nexport default LatestAlbum;\n\nvar _c;\n\n$RefreshReg$(_c, \"LatestAlbum\");","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/LatestAlbum.js"],"names":["Grid","AlbumSharp","DragHandle","PlayCircleFilled","React","useDataLayerValue","LatestAlbum","spotify","albums","dispatch","console","log","items","sort","a","b","release_date","handleClick","getAlbum","id","then","album","tracks","type","playAlbum","images","url","name"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,mBAArB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,gBAAjC,QAAyD,oBAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,OAAO,0BAAP;;;;AAIA,SAASC,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAAgC;AAAA;;AAC9B,QAAM,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAWC,QAAX,IAAuBJ,iBAAiB,EAA9C;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAH8B,CAK9B;;AACAC,EAAAA,MAAM,CAACI,KAAP,CAAaC,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1B,QAAID,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACC,YAAvB,EAAqC;AACnC,aAAO,CAAP;AACD;;AACD,QAAIF,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACC,YAAvB,EAAqC;AACnC,aAAO,CAAC,CAAR;AACD;;AACD,WAAO,CAAP;AACD,GARD;;AAUA,QAAMC,WAAW,GAAG,MAAM;AACxBV,IAAAA,OAAO,CAACW,QAAR,CAAiBV,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBO,EAAjC,EACCC,IADD,CACOC,KAAD,IAAW;AACfX,MAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYU,KAAK,CAACC,MAAlB;AACAb,MAAAA,QAAQ,CAAC;AACPc,QAAAA,IAAI,EAAE,WADC;AAEPF,QAAAA;AAFO,OAAD,CAAR;AAIAZ,MAAAA,QAAQ,CAAC;AACPc,QAAAA,IAAI,EAAE,YADC;AAEPD,QAAAA,MAAM,EAAED,KAAK,CAACC,MAAN,CAAaV;AAFd,OAAD,CAAR;AAID,KAZD;AAaD,GAdD;;AAgBA,QAAMY,SAAS,GAAG,MAAM;AACtBd,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBO,EAA5B;AACAZ,IAAAA,OAAO;AACR,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,eACGC,MAAM,gBACP;AACE,MAAA,GAAG,EAAEA,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBa,MAAhB,CAAuB,CAAvB,EAA0BC,GADjC;AAEE,MAAA,OAAO,EAAET;AAFX;AAAA;AAAA;AAAA;AAAA,YADO,GAIF,IALP,eAME;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,gBACGT,MAAM,gBACP;AAAA,gCACE;AAAA,iCAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAI,UAAA,OAAO,EAAES,WAAb;AAAA,oBAA4BT,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBe;AAA5C;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,gBAAD;AAAkB,UAAA,SAAS,EAAE,yBAA7B;AAAwD,UAAA,OAAO,EAAEH;AAAjE;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,sBADO,GAKD;AANR;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAtDQlB,W;UACsBD,iB;;;KADtBC,W;AAwDT,eAAeA,WAAf","sourcesContent":["import { Grid } from \"@material-ui/core\";\nimport { AlbumSharp, DragHandle, PlayCircleFilled } from \"@material-ui/icons\";\nimport React from \"react\"; \nimport { useDataLayerValue } from \"../../contexts/DataLayer\"; \nimport \"./styles/LatestAlbum.css\"; \n\n\n\nfunction LatestAlbum({spotify}) {\n  const [{albums}, dispatch] = useDataLayerValue(); \n  console.log(albums);\n  console.log(spotify);\n\n  // Sort by latest release date\n  albums.items.sort((a, b) => {\n    if (a.release_date < b.release_date) {\n      return 1;\n    }\n    if (a.release_date > b.release_date) {\n      return -1;\n    }\n    return 0;\n  })\n\n  const handleClick = () => {\n    spotify.getAlbum(albums.items[0].id)\n    .then((album) => {\n      console.log(album);\n      console.log(album.tracks);\n      dispatch({\n        type: \"SET_ALBUM\",\n        album\n      });\n      dispatch({\n        type: \"SET_TRACKS\",\n        tracks: album.tracks.items\n      })\n    });\n  }\n\n  const playAlbum = () => {\n    console.log(albums.items[0].id);\n    spotify\n  }\n\n  return (\n    <div className=\"latestalbum__info\">\n      {albums ? \n      <img \n        src={albums.items[0].images[0].url} \n        onClick={handleClick}\n      /> : null}\n      <div className=\"latestalbum__infoText\">\n        {albums ? \n        <>\n          <h1><strong>Latest Release</strong></h1>\n          <h2 onClick={handleClick} >{albums.items[0].name}</h2>\n          <PlayCircleFilled className={\"latestalbum__playButton\"} onClick={playAlbum} />\n        </> : null }\n      </div>\n    </div>\n  );\n}\n\nexport default LatestAlbum; "]},"metadata":{},"sourceType":"module"}