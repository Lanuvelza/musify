{"ast":null,"code":"'use strict';\n\nexports.addon = function (renderer) {\n  if (process.env.NODE_ENV !== 'production') {\n    require('./__dev__/warnOnMissingDependencies')('rule', renderer, ['put']);\n  }\n\n  var blocks;\n\n  if (process.env.NODE_ENV !== 'production') {\n    blocks = {};\n  }\n\n  renderer.rule = function (css, block) {\n    // Warn user if CSS selectors clash.\n    if (process.env.NODE_ENV !== 'production') {\n      if (block) {\n        if (typeof block !== 'string') {\n          throw new TypeError('nano-css block name must be a string. ' + 'For example, use nano.rule({color: \"red\", \"RedText\").');\n        }\n\n        if (blocks[block]) {\n          console.error('Block name \"' + block + '\" used more than once.');\n        }\n\n        blocks[block] = 1;\n      }\n    }\n\n    block = block || renderer.hash(css);\n    block = renderer.pfx + block;\n    renderer.put('.' + block, css);\n    return ' ' + block;\n  };\n};","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/node_modules/nano-css/addon/rule.js"],"names":["exports","addon","renderer","process","env","NODE_ENV","require","blocks","rule","css","block","TypeError","console","error","hash","pfx","put"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,KAAR,GAAgB,UAAUC,QAAV,EAAoB;AAChC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCC,IAAAA,OAAO,CAAC,qCAAD,CAAP,CAA+C,MAA/C,EAAuDJ,QAAvD,EAAiE,CAAC,KAAD,CAAjE;AACH;;AAED,MAAIK,MAAJ;;AAEA,MAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCE,IAAAA,MAAM,GAAG,EAAT;AACH;;AAEDL,EAAAA,QAAQ,CAACM,IAAT,GAAgB,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AAClC;AACA,QAAIP,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,UAAIK,KAAJ,EAAW;AACP,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,gBAAM,IAAIC,SAAJ,CACF,2CACA,uDAFE,CAAN;AAIH;;AAED,YAAIJ,MAAM,CAACG,KAAD,CAAV,EAAmB;AACfE,UAAAA,OAAO,CAACC,KAAR,CAAc,iBAAiBH,KAAjB,GAAyB,wBAAvC;AACH;;AAEDH,QAAAA,MAAM,CAACG,KAAD,CAAN,GAAgB,CAAhB;AACH;AACJ;;AAEDA,IAAAA,KAAK,GAAGA,KAAK,IAAIR,QAAQ,CAACY,IAAT,CAAcL,GAAd,CAAjB;AACAC,IAAAA,KAAK,GAAGR,QAAQ,CAACa,GAAT,GAAeL,KAAvB;AACAR,IAAAA,QAAQ,CAACc,GAAT,CAAa,MAAMN,KAAnB,EAA0BD,GAA1B;AAEA,WAAO,MAAMC,KAAb;AACH,GAxBD;AAyBH,CApCD","sourcesContent":["'use strict';\n\nexports.addon = function (renderer) {\n    if (process.env.NODE_ENV !== 'production') {\n        require('./__dev__/warnOnMissingDependencies')('rule', renderer, ['put']);\n    }\n\n    var blocks;\n\n    if (process.env.NODE_ENV !== 'production') {\n        blocks = {};\n    }\n\n    renderer.rule = function (css, block) {\n        // Warn user if CSS selectors clash.\n        if (process.env.NODE_ENV !== 'production') {\n            if (block) {\n                if (typeof block !== 'string') {\n                    throw new TypeError(\n                        'nano-css block name must be a string. ' +\n                        'For example, use nano.rule({color: \"red\", \"RedText\").'\n                    );\n                }\n\n                if (blocks[block]) {\n                    console.error('Block name \"' + block + '\" used more than once.');\n                }\n\n                blocks[block] = 1;\n            }\n        }\n\n        block = block || renderer.hash(css);\n        block = renderer.pfx + block;\n        renderer.put('.' + block, css);\n\n        return ' ' + block;\n    };\n};\n"]},"metadata":{},"sourceType":"script"}