{"ast":null,"code":"'use strict';\n\nconst ParkMiller = require('park-miller');\n\nconst stringHash = require('@sindresorhus/string-hash');\n\nconst color = require('color');\n\nconst MAX_INT32 = 2147483647;\nconst GOLDEN_RATIO_CONJUGATE = 0.618033988749895;\n\nclass Randoma {\n  static seed() {\n    return Math.floor(Math.random() * MAX_INT32);\n  }\n\n  constructor({\n    seed\n  }) {\n    if (typeof seed === 'string') {\n      seed = stringHash(seed);\n    }\n\n    if (!Number.isInteger(seed)) {\n      throw new TypeError('Expected `seed` to be a `integer`');\n    }\n\n    this._random = new ParkMiller(seed);\n  }\n\n  integer() {\n    return this._random.integer();\n  }\n\n  integerInRange(min, max) {\n    return this._random.integerInRange(min, max);\n  }\n\n  float() {\n    return this._random.float();\n  }\n\n  floatInRange(min, max) {\n    return this._random.floatInRange(min, max);\n  }\n\n  boolean() {\n    return this._random.boolean();\n  }\n\n  arrayItem(array) {\n    return array[Math.floor(this.float() * array.length)];\n  }\n\n  date() {\n    return new Date(Date.now() * this.float());\n  }\n\n  dateInRange(startDate, endDate) {\n    return new Date(this.integerInRange(startDate.getTime(), endDate.getTime()));\n  }\n\n  color(saturation = 0.5) {\n    let hue = this.float();\n    hue += GOLDEN_RATIO_CONJUGATE;\n    hue %= 1;\n    return color({\n      h: hue * 360,\n      s: saturation * 100,\n      v: 95\n    });\n  }\n\n}\n\nmodule.exports = Randoma;","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/node_modules/randoma/index.js"],"names":["ParkMiller","require","stringHash","color","MAX_INT32","GOLDEN_RATIO_CONJUGATE","Randoma","seed","Math","floor","random","constructor","Number","isInteger","TypeError","_random","integer","integerInRange","min","max","float","floatInRange","boolean","arrayItem","array","length","date","Date","now","dateInRange","startDate","endDate","getTime","saturation","hue","h","s","v","module","exports"],"mappings":"AAAA;;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,2BAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMG,SAAS,GAAG,UAAlB;AACA,MAAMC,sBAAsB,GAAG,iBAA/B;;AAEA,MAAMC,OAAN,CAAc;AACF,SAAJC,IAAI,GAAG;AACb,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,SAA3B,CAAP;AACA;;AAEDO,EAAAA,WAAW,CAAC;AAACJ,IAAAA;AAAD,GAAD,EAAS;AACnB,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC7BA,MAAAA,IAAI,GAAGL,UAAU,CAACK,IAAD,CAAjB;AACA;;AAED,QAAI,CAACK,MAAM,CAACC,SAAP,CAAiBN,IAAjB,CAAL,EAA6B;AAC5B,YAAM,IAAIO,SAAJ,CAAc,mCAAd,CAAN;AACA;;AAED,SAAKC,OAAL,GAAe,IAAIf,UAAJ,CAAeO,IAAf,CAAf;AACA;;AAEDS,EAAAA,OAAO,GAAG;AACT,WAAO,KAAKD,OAAL,CAAaC,OAAb,EAAP;AACA;;AAEDC,EAAAA,cAAc,CAACC,GAAD,EAAMC,GAAN,EAAW;AACxB,WAAO,KAAKJ,OAAL,CAAaE,cAAb,CAA4BC,GAA5B,EAAiCC,GAAjC,CAAP;AACA;;AAEDC,EAAAA,KAAK,GAAG;AACP,WAAO,KAAKL,OAAL,CAAaK,KAAb,EAAP;AACA;;AAEDC,EAAAA,YAAY,CAACH,GAAD,EAAMC,GAAN,EAAW;AACtB,WAAO,KAAKJ,OAAL,CAAaM,YAAb,CAA0BH,GAA1B,EAA+BC,GAA/B,CAAP;AACA;;AAEDG,EAAAA,OAAO,GAAG;AACT,WAAO,KAAKP,OAAL,CAAaO,OAAb,EAAP;AACA;;AAEDC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AAChB,WAAOA,KAAK,CAAChB,IAAI,CAACC,KAAL,CAAW,KAAKW,KAAL,KAAeI,KAAK,CAACC,MAAhC,CAAD,CAAZ;AACA;;AAEDC,EAAAA,IAAI,GAAG;AACN,WAAO,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,KAAKR,KAAL,EAAtB,CAAP;AACA;;AAEDS,EAAAA,WAAW,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AAC/B,WAAO,IAAIJ,IAAJ,CAAS,KAAKV,cAAL,CAAoBa,SAAS,CAACE,OAAV,EAApB,EAAyCD,OAAO,CAACC,OAAR,EAAzC,CAAT,CAAP;AACA;;AAED7B,EAAAA,KAAK,CAAC8B,UAAU,GAAG,GAAd,EAAmB;AACvB,QAAIC,GAAG,GAAG,KAAKd,KAAL,EAAV;AACAc,IAAAA,GAAG,IAAI7B,sBAAP;AACA6B,IAAAA,GAAG,IAAI,CAAP;AAEA,WAAO/B,KAAK,CAAC;AACZgC,MAAAA,CAAC,EAAED,GAAG,GAAG,GADG;AAEZE,MAAAA,CAAC,EAAEH,UAAU,GAAG,GAFJ;AAGZI,MAAAA,CAAC,EAAE;AAHS,KAAD,CAAZ;AAKA;;AA3DY;;AA8DdC,MAAM,CAACC,OAAP,GAAiBjC,OAAjB","sourcesContent":["'use strict';\nconst ParkMiller = require('park-miller');\nconst stringHash = require('@sindresorhus/string-hash');\nconst color = require('color');\n\nconst MAX_INT32 = 2147483647;\nconst GOLDEN_RATIO_CONJUGATE = 0.618033988749895;\n\nclass Randoma {\n\tstatic seed() {\n\t\treturn Math.floor(Math.random() * MAX_INT32);\n\t}\n\n\tconstructor({seed}) {\n\t\tif (typeof seed === 'string') {\n\t\t\tseed = stringHash(seed);\n\t\t}\n\n\t\tif (!Number.isInteger(seed)) {\n\t\t\tthrow new TypeError('Expected `seed` to be a `integer`');\n\t\t}\n\n\t\tthis._random = new ParkMiller(seed);\n\t}\n\n\tinteger() {\n\t\treturn this._random.integer();\n\t}\n\n\tintegerInRange(min, max) {\n\t\treturn this._random.integerInRange(min, max);\n\t}\n\n\tfloat() {\n\t\treturn this._random.float();\n\t}\n\n\tfloatInRange(min, max) {\n\t\treturn this._random.floatInRange(min, max);\n\t}\n\n\tboolean() {\n\t\treturn this._random.boolean();\n\t}\n\n\tarrayItem(array) {\n\t\treturn array[Math.floor(this.float() * array.length)];\n\t}\n\n\tdate() {\n\t\treturn new Date(Date.now() * this.float());\n\t}\n\n\tdateInRange(startDate, endDate) {\n\t\treturn new Date(this.integerInRange(startDate.getTime(), endDate.getTime()));\n\t}\n\n\tcolor(saturation = 0.5) {\n\t\tlet hue = this.float();\n\t\thue += GOLDEN_RATIO_CONJUGATE;\n\t\thue %= 1;\n\n\t\treturn color({\n\t\t\th: hue * 360,\n\t\t\ts: saturation * 100,\n\t\t\tv: 95\n\t\t});\n\t}\n}\n\nmodule.exports = Randoma;\n"]},"metadata":{},"sourceType":"script"}