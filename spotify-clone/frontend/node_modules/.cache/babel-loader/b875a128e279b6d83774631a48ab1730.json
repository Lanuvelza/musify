{"ast":null,"code":"var _jsxFileName = \"/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/SearchResults.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Avatar, makeStyles } from \"@material-ui/core\";\nimport \"./styles/SearchResults.css\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  avatar: {\n    height: '200px',\n    width: '200px',\n    boxShadow: '5px 8px 15px black',\n    '&:hover': {\n      cursor: 'pointer'\n    }\n  }\n});\n\nconst filterAblumsByMarket = function (albums, country) {\n  const filteredAlbums = [];\n  const titles = {};\n\n  for (const album of albums) {\n    if (album.available_markets.includes(country) && !titles[album.name]) {\n      titles[album.name] = 1;\n      filteredAlbums.push(album);\n    }\n  }\n\n  filteredAlbums.sort((a, b) => {\n    if (a.release_date < b.release_date) {\n      return 1;\n    }\n\n    if (a.release_date > b.release_date) {\n      return -1;\n    }\n\n    return 0;\n  });\n  return filteredAlbums;\n};\n\nfunction SearchResults({\n  artist,\n  spotify\n}) {\n  _s();\n\n  const [{}, dispatch] = useDataLayerValue();\n  const classes = useStyles();\n\n  const selectArtist = () => {\n    spotify.getArtistAlbums(artist.id, {\n      include_groups: [\"album\", \"single\"],\n      limit: 50\n    }).then(results => {\n      console.log(results);\n      const albums = filterAblumsByMarket(results.items, \"US\");\n      console.log(albums);\n      dispatch({\n        type: \"SET_ALBUMS\",\n        albums: albums\n      });\n    }).then(() => {\n      spotify.getArtistTopTracks(artist.id, \"US\").then(results => {\n        dispatch({\n          type: \"SET_TRACKS\",\n          tracks: results.tracks\n        });\n      });\n    }).then(() => {\n      dispatch({\n        type: \"SET_ARTIST\",\n        artist\n      });\n      dispatch({\n        type: \"SET_SEARCHING\",\n        searching: false\n      });\n      dispatch({\n        type: \"SET_ALBUM\",\n        album: null\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results__itemBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results__itemAvatar\",\n      children: /*#__PURE__*/_jsxDEV(Avatar, {\n        src: artist.images.length ? artist.images[0].url : null,\n        alt: artist.name,\n        className: classes.avatar,\n        onClick: selectArtist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results__itemInfo\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: artist.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this)]\n  }, artist.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchResults, \"vbvz/44YFvZar5/FHjo/yOchGHA=\", false, function () {\n  return [useDataLayerValue, useStyles];\n});\n\n_c = SearchResults;\nexport default SearchResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"sources":["/Users/ianlam/projects-after-lighthouse/spotify-clone/spotify-clone/src/components/player/SearchResults.js"],"names":["React","Avatar","makeStyles","useDataLayerValue","useStyles","avatar","height","width","boxShadow","cursor","filterAblumsByMarket","albums","country","filteredAlbums","titles","album","available_markets","includes","name","push","sort","a","b","release_date","SearchResults","artist","spotify","dispatch","classes","selectArtist","getArtistAlbums","id","include_groups","limit","then","results","console","log","items","type","getArtistTopTracks","tracks","searching","images","length","url"],"mappings":"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","sourcesContent":["import React from 'react'; \nimport { Avatar, makeStyles } from \"@material-ui/core\";\nimport \"./styles/SearchResults.css\";\nimport { useDataLayerValue } from \"../../contexts/DataLayer\";\n\nconst useStyles = makeStyles({\n  avatar: {\n    height: '200px',\n    width: '200px',\n    boxShadow: '5px 8px 15px black',\n    '&:hover': {\n      cursor: 'pointer',\n    }\n  }\n})\n\nconst filterAblumsByMarket = function(albums, country) {\n  const filteredAlbums = [];\n  const titles = {}; \n  \n  for(const album of albums) {\n    if(album.available_markets.includes(country) && !titles[album.name]) {\n      titles[album.name] = 1;\n      filteredAlbums.push(album);\n    }\n  }\n\n  filteredAlbums.sort((a,b) =>  {\n    if (a.release_date < b.release_date) {\n      return 1; \n    }\n    if (a.release_date > b.release_date) {\n      return -1; \n    }\n    return 0; \n  })\n\n  return filteredAlbums; \n}\n\nfunction SearchResults({artist, spotify}) {\n  const [{}, dispatch] = useDataLayerValue();\n\n  const classes = useStyles();\n\n  const selectArtist = () => {\n\n    spotify.getArtistAlbums(artist.id, {include_groups: [\"album\", \"single\"], limit: 50})\n    .then((results) => {\n\n      console.log(results);\n\n      const albums = filterAblumsByMarket(results.items, \"US\");\n      console.log(albums);\n\n      dispatch({\n        type: \"SET_ALBUMS\", \n        albums: albums\n      })\n    })\n    .then(() => {\n      spotify.getArtistTopTracks(artist.id, \"US\")\n      .then((results) => {\n        dispatch({\n          type: \"SET_TRACKS\", \n          tracks: results.tracks\n        })\n      })\n    })\n    .then(() => {\n      dispatch({\n        type: \"SET_ARTIST\",\n        artist\n      })\n\n      dispatch({\n        type: \"SET_SEARCHING\",\n        searching: false\n      })\n\n      dispatch({\n        type: \"SET_ALBUM\", \n        album: null\n      })\n    });\n  }\n\n  return (\n    <div key={artist.id} className=\"results__itemBody\">\n      <div className=\"results__itemAvatar\">\n        <Avatar \n          src={artist.images.length ? artist.images[0].url : null} \n          alt={artist.name} \n          className={classes.avatar}\n          onClick={selectArtist}\n        />\n      </div>\n    <div className=\"results__itemInfo\">\n      <p>{artist.name}</p>\n    </div>\n  </div>\n  )\n}\n\nexport default SearchResults;"]},"metadata":{},"sourceType":"module"}